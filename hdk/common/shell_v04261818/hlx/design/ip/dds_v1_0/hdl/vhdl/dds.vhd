-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dds is
generic (
    C_M_AXI_DDS_OUTPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDS_OUTPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDS_OUTPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDS_OUTPUT1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDS_OUTPUT1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDS_OUTPUT1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_PROG_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_PROG_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDS_OUTPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDS_OUTPUT1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDS_OUTPUT1_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DDS_OUTPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDS_OUTPUT1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DDS_OUTPUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DDS_OUTPUT_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DDS_OUTPUT1_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT_AWREADY : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DDS_OUTPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_WVALID : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT_WREADY : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DDS_OUTPUT_WLAST : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT_ARREADY : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DDS_OUTPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_RVALID : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_RREADY : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_RLAST : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT_BVALID : IN STD_LOGIC;
    m_axi_DDS_OUTPUT_BREADY : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT_BUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_AWVALID : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT1_AWREADY : IN STD_LOGIC;
    m_axi_DDS_OUTPUT1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ADDR_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DDS_OUTPUT1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_AWUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_WVALID : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT1_WREADY : IN STD_LOGIC;
    m_axi_DDS_OUTPUT1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_DATA_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_DATA_WIDTH/8-1 downto 0);
    m_axi_DDS_OUTPUT1_WLAST : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_WUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_ARVALID : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT1_ARREADY : IN STD_LOGIC;
    m_axi_DDS_OUTPUT1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ADDR_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DDS_OUTPUT1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDS_OUTPUT1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDS_OUTPUT1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ARUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_RVALID : IN STD_LOGIC;
    m_axi_DDS_OUTPUT1_RREADY : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_DATA_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_RLAST : IN STD_LOGIC;
    m_axi_DDS_OUTPUT1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_RUSER_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT1_BVALID : IN STD_LOGIC;
    m_axi_DDS_OUTPUT1_BREADY : OUT STD_LOGIC;
    m_axi_DDS_OUTPUT1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDS_OUTPUT1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_ID_WIDTH-1 downto 0);
    m_axi_DDS_OUTPUT1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDS_OUTPUT1_BUSER_WIDTH-1 downto 0);
    s_axi_PROG_BUS_AWVALID : IN STD_LOGIC;
    s_axi_PROG_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_PROG_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PROG_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PROG_BUS_WVALID : IN STD_LOGIC;
    s_axi_PROG_BUS_WREADY : OUT STD_LOGIC;
    s_axi_PROG_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_PROG_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PROG_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_PROG_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_PROG_BUS_ARVALID : IN STD_LOGIC;
    s_axi_PROG_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_PROG_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_PROG_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_PROG_BUS_RVALID : OUT STD_LOGIC;
    s_axi_PROG_BUS_RREADY : IN STD_LOGIC;
    s_axi_PROG_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_PROG_BUS_DATA_WIDTH-1 downto 0);
    s_axi_PROG_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_PROG_BUS_BVALID : OUT STD_LOGIC;
    s_axi_PROG_BUS_BREADY : IN STD_LOGIC;
    s_axi_PROG_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dds is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dds,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku040-ffva1156-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.100000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=2,HLS_SYN_FF=2200,HLS_SYN_LUT=2536}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal nofSample : STD_LOGIC_VECTOR (31 downto 0);
    signal incr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal DDS_OUTPUT_AWVALID : STD_LOGIC;
    signal DDS_OUTPUT_AWREADY : STD_LOGIC;
    signal DDS_OUTPUT_WVALID : STD_LOGIC;
    signal DDS_OUTPUT_WREADY : STD_LOGIC;
    signal DDS_OUTPUT_ARREADY : STD_LOGIC;
    signal DDS_OUTPUT_RVALID : STD_LOGIC;
    signal DDS_OUTPUT_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal DDS_OUTPUT_RLAST : STD_LOGIC;
    signal DDS_OUTPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DDS_OUTPUT_BVALID : STD_LOGIC;
    signal DDS_OUTPUT_BREADY : STD_LOGIC;
    signal DDS_OUTPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DDS_OUTPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT1_AWVALID : STD_LOGIC;
    signal DDS_OUTPUT1_AWREADY : STD_LOGIC;
    signal DDS_OUTPUT1_WVALID : STD_LOGIC;
    signal DDS_OUTPUT1_WREADY : STD_LOGIC;
    signal DDS_OUTPUT1_ARREADY : STD_LOGIC;
    signal DDS_OUTPUT1_RVALID : STD_LOGIC;
    signal DDS_OUTPUT1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal DDS_OUTPUT1_RLAST : STD_LOGIC;
    signal DDS_OUTPUT1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DDS_OUTPUT1_BVALID : STD_LOGIC;
    signal DDS_OUTPUT1_BREADY : STD_LOGIC;
    signal DDS_OUTPUT1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DDS_OUTPUT1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DDS_OUTPUT1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal incr_V_read_reg_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal nofSample_read_reg_73 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_ap_start : STD_LOGIC;
    signal grp_process_frame_fu_52_ap_done : STD_LOGIC;
    signal grp_process_frame_fu_52_ap_idle : STD_LOGIC;
    signal grp_process_frame_fu_52_ap_ready : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWVALID : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_WVALID : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_cos_out_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_WLAST : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_cos_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARVALID : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_cos_out_V_RREADY : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_cos_out_V_BREADY : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWVALID : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_WVALID : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_sin_out_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_WLAST : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_sin_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARVALID : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_process_frame_fu_52_m_axi_sin_out_V_RREADY : STD_LOGIC;
    signal grp_process_frame_fu_52_m_axi_sin_out_V_BREADY : STD_LOGIC;
    signal ap_reg_grp_process_frame_fu_52_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component process_frame IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nofSample : IN STD_LOGIC_VECTOR (31 downto 0);
        incr_V : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cos_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_cos_out_V_AWREADY : IN STD_LOGIC;
        m_axi_cos_out_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cos_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cos_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cos_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cos_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cos_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cos_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cos_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_WVALID : OUT STD_LOGIC;
        m_axi_cos_out_V_WREADY : IN STD_LOGIC;
        m_axi_cos_out_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_cos_out_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_WLAST : OUT STD_LOGIC;
        m_axi_cos_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_cos_out_V_ARREADY : IN STD_LOGIC;
        m_axi_cos_out_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cos_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cos_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cos_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cos_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cos_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cos_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cos_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_RVALID : IN STD_LOGIC;
        m_axi_cos_out_V_RREADY : OUT STD_LOGIC;
        m_axi_cos_out_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_cos_out_V_RLAST : IN STD_LOGIC;
        m_axi_cos_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_BVALID : IN STD_LOGIC;
        m_axi_cos_out_V_BREADY : OUT STD_LOGIC;
        m_axi_cos_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cos_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cos_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_sin_out_V_AWREADY : IN STD_LOGIC;
        m_axi_sin_out_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sin_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sin_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sin_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sin_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sin_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sin_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sin_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_WVALID : OUT STD_LOGIC;
        m_axi_sin_out_V_WREADY : IN STD_LOGIC;
        m_axi_sin_out_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_sin_out_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_WLAST : OUT STD_LOGIC;
        m_axi_sin_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_sin_out_V_ARREADY : IN STD_LOGIC;
        m_axi_sin_out_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sin_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sin_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sin_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sin_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sin_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sin_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sin_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_RVALID : IN STD_LOGIC;
        m_axi_sin_out_V_RREADY : OUT STD_LOGIC;
        m_axi_sin_out_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_sin_out_V_RLAST : IN STD_LOGIC;
        m_axi_sin_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_BVALID : IN STD_LOGIC;
        m_axi_sin_out_V_BREADY : OUT STD_LOGIC;
        m_axi_sin_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sin_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sin_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dds_PROG_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        nofSample : OUT STD_LOGIC_VECTOR (31 downto 0);
        incr_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dds_DDS_OUTPUT_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dds_DDS_OUTPUT1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dds_PROG_BUS_s_axi_U : component dds_PROG_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_PROG_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_PROG_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_PROG_BUS_AWVALID,
        AWREADY => s_axi_PROG_BUS_AWREADY,
        AWADDR => s_axi_PROG_BUS_AWADDR,
        WVALID => s_axi_PROG_BUS_WVALID,
        WREADY => s_axi_PROG_BUS_WREADY,
        WDATA => s_axi_PROG_BUS_WDATA,
        WSTRB => s_axi_PROG_BUS_WSTRB,
        ARVALID => s_axi_PROG_BUS_ARVALID,
        ARREADY => s_axi_PROG_BUS_ARREADY,
        ARADDR => s_axi_PROG_BUS_ARADDR,
        RVALID => s_axi_PROG_BUS_RVALID,
        RREADY => s_axi_PROG_BUS_RREADY,
        RDATA => s_axi_PROG_BUS_RDATA,
        RRESP => s_axi_PROG_BUS_RRESP,
        BVALID => s_axi_PROG_BUS_BVALID,
        BREADY => s_axi_PROG_BUS_BREADY,
        BRESP => s_axi_PROG_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        nofSample => nofSample,
        incr_V => incr_V);

    dds_DDS_OUTPUT_m_axi_U : component dds_DDS_OUTPUT_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DDS_OUTPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DDS_OUTPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DDS_OUTPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DDS_OUTPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DDS_OUTPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DDS_OUTPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DDS_OUTPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DDS_OUTPUT_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DDS_OUTPUT_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DDS_OUTPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDS_OUTPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDS_OUTPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DDS_OUTPUT_AWVALID,
        AWREADY => m_axi_DDS_OUTPUT_AWREADY,
        AWADDR => m_axi_DDS_OUTPUT_AWADDR,
        AWID => m_axi_DDS_OUTPUT_AWID,
        AWLEN => m_axi_DDS_OUTPUT_AWLEN,
        AWSIZE => m_axi_DDS_OUTPUT_AWSIZE,
        AWBURST => m_axi_DDS_OUTPUT_AWBURST,
        AWLOCK => m_axi_DDS_OUTPUT_AWLOCK,
        AWCACHE => m_axi_DDS_OUTPUT_AWCACHE,
        AWPROT => m_axi_DDS_OUTPUT_AWPROT,
        AWQOS => m_axi_DDS_OUTPUT_AWQOS,
        AWREGION => m_axi_DDS_OUTPUT_AWREGION,
        AWUSER => m_axi_DDS_OUTPUT_AWUSER,
        WVALID => m_axi_DDS_OUTPUT_WVALID,
        WREADY => m_axi_DDS_OUTPUT_WREADY,
        WDATA => m_axi_DDS_OUTPUT_WDATA,
        WSTRB => m_axi_DDS_OUTPUT_WSTRB,
        WLAST => m_axi_DDS_OUTPUT_WLAST,
        WID => m_axi_DDS_OUTPUT_WID,
        WUSER => m_axi_DDS_OUTPUT_WUSER,
        ARVALID => m_axi_DDS_OUTPUT_ARVALID,
        ARREADY => m_axi_DDS_OUTPUT_ARREADY,
        ARADDR => m_axi_DDS_OUTPUT_ARADDR,
        ARID => m_axi_DDS_OUTPUT_ARID,
        ARLEN => m_axi_DDS_OUTPUT_ARLEN,
        ARSIZE => m_axi_DDS_OUTPUT_ARSIZE,
        ARBURST => m_axi_DDS_OUTPUT_ARBURST,
        ARLOCK => m_axi_DDS_OUTPUT_ARLOCK,
        ARCACHE => m_axi_DDS_OUTPUT_ARCACHE,
        ARPROT => m_axi_DDS_OUTPUT_ARPROT,
        ARQOS => m_axi_DDS_OUTPUT_ARQOS,
        ARREGION => m_axi_DDS_OUTPUT_ARREGION,
        ARUSER => m_axi_DDS_OUTPUT_ARUSER,
        RVALID => m_axi_DDS_OUTPUT_RVALID,
        RREADY => m_axi_DDS_OUTPUT_RREADY,
        RDATA => m_axi_DDS_OUTPUT_RDATA,
        RLAST => m_axi_DDS_OUTPUT_RLAST,
        RID => m_axi_DDS_OUTPUT_RID,
        RUSER => m_axi_DDS_OUTPUT_RUSER,
        RRESP => m_axi_DDS_OUTPUT_RRESP,
        BVALID => m_axi_DDS_OUTPUT_BVALID,
        BREADY => m_axi_DDS_OUTPUT_BREADY,
        BRESP => m_axi_DDS_OUTPUT_BRESP,
        BID => m_axi_DDS_OUTPUT_BID,
        BUSER => m_axi_DDS_OUTPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DDS_OUTPUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DDS_OUTPUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DDS_OUTPUT_RDATA,
        I_RID => DDS_OUTPUT_RID,
        I_RUSER => DDS_OUTPUT_RUSER,
        I_RRESP => DDS_OUTPUT_RRESP,
        I_RLAST => DDS_OUTPUT_RLAST,
        I_AWVALID => DDS_OUTPUT_AWVALID,
        I_AWREADY => DDS_OUTPUT_AWREADY,
        I_AWADDR => grp_process_frame_fu_52_m_axi_cos_out_V_AWADDR,
        I_AWID => grp_process_frame_fu_52_m_axi_cos_out_V_AWID,
        I_AWLEN => grp_process_frame_fu_52_m_axi_cos_out_V_AWLEN,
        I_AWSIZE => grp_process_frame_fu_52_m_axi_cos_out_V_AWSIZE,
        I_AWLOCK => grp_process_frame_fu_52_m_axi_cos_out_V_AWLOCK,
        I_AWCACHE => grp_process_frame_fu_52_m_axi_cos_out_V_AWCACHE,
        I_AWQOS => grp_process_frame_fu_52_m_axi_cos_out_V_AWQOS,
        I_AWPROT => grp_process_frame_fu_52_m_axi_cos_out_V_AWPROT,
        I_AWUSER => grp_process_frame_fu_52_m_axi_cos_out_V_AWUSER,
        I_AWBURST => grp_process_frame_fu_52_m_axi_cos_out_V_AWBURST,
        I_AWREGION => grp_process_frame_fu_52_m_axi_cos_out_V_AWREGION,
        I_WVALID => DDS_OUTPUT_WVALID,
        I_WREADY => DDS_OUTPUT_WREADY,
        I_WDATA => grp_process_frame_fu_52_m_axi_cos_out_V_WDATA,
        I_WID => grp_process_frame_fu_52_m_axi_cos_out_V_WID,
        I_WUSER => grp_process_frame_fu_52_m_axi_cos_out_V_WUSER,
        I_WLAST => grp_process_frame_fu_52_m_axi_cos_out_V_WLAST,
        I_WSTRB => grp_process_frame_fu_52_m_axi_cos_out_V_WSTRB,
        I_BVALID => DDS_OUTPUT_BVALID,
        I_BREADY => DDS_OUTPUT_BREADY,
        I_BRESP => DDS_OUTPUT_BRESP,
        I_BID => DDS_OUTPUT_BID,
        I_BUSER => DDS_OUTPUT_BUSER);

    dds_DDS_OUTPUT1_m_axi_U : component dds_DDS_OUTPUT1_m_axi
    generic map (
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DDS_OUTPUT1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DDS_OUTPUT1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DDS_OUTPUT1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DDS_OUTPUT1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DDS_OUTPUT1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DDS_OUTPUT1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DDS_OUTPUT1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DDS_OUTPUT1_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DDS_OUTPUT1_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DDS_OUTPUT1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDS_OUTPUT1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDS_OUTPUT1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DDS_OUTPUT1_AWVALID,
        AWREADY => m_axi_DDS_OUTPUT1_AWREADY,
        AWADDR => m_axi_DDS_OUTPUT1_AWADDR,
        AWID => m_axi_DDS_OUTPUT1_AWID,
        AWLEN => m_axi_DDS_OUTPUT1_AWLEN,
        AWSIZE => m_axi_DDS_OUTPUT1_AWSIZE,
        AWBURST => m_axi_DDS_OUTPUT1_AWBURST,
        AWLOCK => m_axi_DDS_OUTPUT1_AWLOCK,
        AWCACHE => m_axi_DDS_OUTPUT1_AWCACHE,
        AWPROT => m_axi_DDS_OUTPUT1_AWPROT,
        AWQOS => m_axi_DDS_OUTPUT1_AWQOS,
        AWREGION => m_axi_DDS_OUTPUT1_AWREGION,
        AWUSER => m_axi_DDS_OUTPUT1_AWUSER,
        WVALID => m_axi_DDS_OUTPUT1_WVALID,
        WREADY => m_axi_DDS_OUTPUT1_WREADY,
        WDATA => m_axi_DDS_OUTPUT1_WDATA,
        WSTRB => m_axi_DDS_OUTPUT1_WSTRB,
        WLAST => m_axi_DDS_OUTPUT1_WLAST,
        WID => m_axi_DDS_OUTPUT1_WID,
        WUSER => m_axi_DDS_OUTPUT1_WUSER,
        ARVALID => m_axi_DDS_OUTPUT1_ARVALID,
        ARREADY => m_axi_DDS_OUTPUT1_ARREADY,
        ARADDR => m_axi_DDS_OUTPUT1_ARADDR,
        ARID => m_axi_DDS_OUTPUT1_ARID,
        ARLEN => m_axi_DDS_OUTPUT1_ARLEN,
        ARSIZE => m_axi_DDS_OUTPUT1_ARSIZE,
        ARBURST => m_axi_DDS_OUTPUT1_ARBURST,
        ARLOCK => m_axi_DDS_OUTPUT1_ARLOCK,
        ARCACHE => m_axi_DDS_OUTPUT1_ARCACHE,
        ARPROT => m_axi_DDS_OUTPUT1_ARPROT,
        ARQOS => m_axi_DDS_OUTPUT1_ARQOS,
        ARREGION => m_axi_DDS_OUTPUT1_ARREGION,
        ARUSER => m_axi_DDS_OUTPUT1_ARUSER,
        RVALID => m_axi_DDS_OUTPUT1_RVALID,
        RREADY => m_axi_DDS_OUTPUT1_RREADY,
        RDATA => m_axi_DDS_OUTPUT1_RDATA,
        RLAST => m_axi_DDS_OUTPUT1_RLAST,
        RID => m_axi_DDS_OUTPUT1_RID,
        RUSER => m_axi_DDS_OUTPUT1_RUSER,
        RRESP => m_axi_DDS_OUTPUT1_RRESP,
        BVALID => m_axi_DDS_OUTPUT1_BVALID,
        BREADY => m_axi_DDS_OUTPUT1_BREADY,
        BRESP => m_axi_DDS_OUTPUT1_BRESP,
        BID => m_axi_DDS_OUTPUT1_BID,
        BUSER => m_axi_DDS_OUTPUT1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DDS_OUTPUT1_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DDS_OUTPUT1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DDS_OUTPUT1_RDATA,
        I_RID => DDS_OUTPUT1_RID,
        I_RUSER => DDS_OUTPUT1_RUSER,
        I_RRESP => DDS_OUTPUT1_RRESP,
        I_RLAST => DDS_OUTPUT1_RLAST,
        I_AWVALID => DDS_OUTPUT1_AWVALID,
        I_AWREADY => DDS_OUTPUT1_AWREADY,
        I_AWADDR => grp_process_frame_fu_52_m_axi_sin_out_V_AWADDR,
        I_AWID => grp_process_frame_fu_52_m_axi_sin_out_V_AWID,
        I_AWLEN => grp_process_frame_fu_52_m_axi_sin_out_V_AWLEN,
        I_AWSIZE => grp_process_frame_fu_52_m_axi_sin_out_V_AWSIZE,
        I_AWLOCK => grp_process_frame_fu_52_m_axi_sin_out_V_AWLOCK,
        I_AWCACHE => grp_process_frame_fu_52_m_axi_sin_out_V_AWCACHE,
        I_AWQOS => grp_process_frame_fu_52_m_axi_sin_out_V_AWQOS,
        I_AWPROT => grp_process_frame_fu_52_m_axi_sin_out_V_AWPROT,
        I_AWUSER => grp_process_frame_fu_52_m_axi_sin_out_V_AWUSER,
        I_AWBURST => grp_process_frame_fu_52_m_axi_sin_out_V_AWBURST,
        I_AWREGION => grp_process_frame_fu_52_m_axi_sin_out_V_AWREGION,
        I_WVALID => DDS_OUTPUT1_WVALID,
        I_WREADY => DDS_OUTPUT1_WREADY,
        I_WDATA => grp_process_frame_fu_52_m_axi_sin_out_V_WDATA,
        I_WID => grp_process_frame_fu_52_m_axi_sin_out_V_WID,
        I_WUSER => grp_process_frame_fu_52_m_axi_sin_out_V_WUSER,
        I_WLAST => grp_process_frame_fu_52_m_axi_sin_out_V_WLAST,
        I_WSTRB => grp_process_frame_fu_52_m_axi_sin_out_V_WSTRB,
        I_BVALID => DDS_OUTPUT1_BVALID,
        I_BREADY => DDS_OUTPUT1_BREADY,
        I_BRESP => DDS_OUTPUT1_BRESP,
        I_BID => DDS_OUTPUT1_BID,
        I_BUSER => DDS_OUTPUT1_BUSER);

    grp_process_frame_fu_52 : component process_frame
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_process_frame_fu_52_ap_start,
        ap_done => grp_process_frame_fu_52_ap_done,
        ap_idle => grp_process_frame_fu_52_ap_idle,
        ap_ready => grp_process_frame_fu_52_ap_ready,
        nofSample => nofSample_read_reg_73,
        incr_V => incr_V_read_reg_68,
        m_axi_cos_out_V_AWVALID => grp_process_frame_fu_52_m_axi_cos_out_V_AWVALID,
        m_axi_cos_out_V_AWREADY => DDS_OUTPUT_AWREADY,
        m_axi_cos_out_V_AWADDR => grp_process_frame_fu_52_m_axi_cos_out_V_AWADDR,
        m_axi_cos_out_V_AWID => grp_process_frame_fu_52_m_axi_cos_out_V_AWID,
        m_axi_cos_out_V_AWLEN => grp_process_frame_fu_52_m_axi_cos_out_V_AWLEN,
        m_axi_cos_out_V_AWSIZE => grp_process_frame_fu_52_m_axi_cos_out_V_AWSIZE,
        m_axi_cos_out_V_AWBURST => grp_process_frame_fu_52_m_axi_cos_out_V_AWBURST,
        m_axi_cos_out_V_AWLOCK => grp_process_frame_fu_52_m_axi_cos_out_V_AWLOCK,
        m_axi_cos_out_V_AWCACHE => grp_process_frame_fu_52_m_axi_cos_out_V_AWCACHE,
        m_axi_cos_out_V_AWPROT => grp_process_frame_fu_52_m_axi_cos_out_V_AWPROT,
        m_axi_cos_out_V_AWQOS => grp_process_frame_fu_52_m_axi_cos_out_V_AWQOS,
        m_axi_cos_out_V_AWREGION => grp_process_frame_fu_52_m_axi_cos_out_V_AWREGION,
        m_axi_cos_out_V_AWUSER => grp_process_frame_fu_52_m_axi_cos_out_V_AWUSER,
        m_axi_cos_out_V_WVALID => grp_process_frame_fu_52_m_axi_cos_out_V_WVALID,
        m_axi_cos_out_V_WREADY => DDS_OUTPUT_WREADY,
        m_axi_cos_out_V_WDATA => grp_process_frame_fu_52_m_axi_cos_out_V_WDATA,
        m_axi_cos_out_V_WSTRB => grp_process_frame_fu_52_m_axi_cos_out_V_WSTRB,
        m_axi_cos_out_V_WLAST => grp_process_frame_fu_52_m_axi_cos_out_V_WLAST,
        m_axi_cos_out_V_WID => grp_process_frame_fu_52_m_axi_cos_out_V_WID,
        m_axi_cos_out_V_WUSER => grp_process_frame_fu_52_m_axi_cos_out_V_WUSER,
        m_axi_cos_out_V_ARVALID => grp_process_frame_fu_52_m_axi_cos_out_V_ARVALID,
        m_axi_cos_out_V_ARREADY => ap_const_logic_0,
        m_axi_cos_out_V_ARADDR => grp_process_frame_fu_52_m_axi_cos_out_V_ARADDR,
        m_axi_cos_out_V_ARID => grp_process_frame_fu_52_m_axi_cos_out_V_ARID,
        m_axi_cos_out_V_ARLEN => grp_process_frame_fu_52_m_axi_cos_out_V_ARLEN,
        m_axi_cos_out_V_ARSIZE => grp_process_frame_fu_52_m_axi_cos_out_V_ARSIZE,
        m_axi_cos_out_V_ARBURST => grp_process_frame_fu_52_m_axi_cos_out_V_ARBURST,
        m_axi_cos_out_V_ARLOCK => grp_process_frame_fu_52_m_axi_cos_out_V_ARLOCK,
        m_axi_cos_out_V_ARCACHE => grp_process_frame_fu_52_m_axi_cos_out_V_ARCACHE,
        m_axi_cos_out_V_ARPROT => grp_process_frame_fu_52_m_axi_cos_out_V_ARPROT,
        m_axi_cos_out_V_ARQOS => grp_process_frame_fu_52_m_axi_cos_out_V_ARQOS,
        m_axi_cos_out_V_ARREGION => grp_process_frame_fu_52_m_axi_cos_out_V_ARREGION,
        m_axi_cos_out_V_ARUSER => grp_process_frame_fu_52_m_axi_cos_out_V_ARUSER,
        m_axi_cos_out_V_RVALID => ap_const_logic_0,
        m_axi_cos_out_V_RREADY => grp_process_frame_fu_52_m_axi_cos_out_V_RREADY,
        m_axi_cos_out_V_RDATA => ap_const_lv16_0,
        m_axi_cos_out_V_RLAST => ap_const_logic_0,
        m_axi_cos_out_V_RID => ap_const_lv1_0,
        m_axi_cos_out_V_RUSER => ap_const_lv1_0,
        m_axi_cos_out_V_RRESP => ap_const_lv2_0,
        m_axi_cos_out_V_BVALID => DDS_OUTPUT_BVALID,
        m_axi_cos_out_V_BREADY => grp_process_frame_fu_52_m_axi_cos_out_V_BREADY,
        m_axi_cos_out_V_BRESP => DDS_OUTPUT_BRESP,
        m_axi_cos_out_V_BID => DDS_OUTPUT_BID,
        m_axi_cos_out_V_BUSER => DDS_OUTPUT_BUSER,
        m_axi_sin_out_V_AWVALID => grp_process_frame_fu_52_m_axi_sin_out_V_AWVALID,
        m_axi_sin_out_V_AWREADY => DDS_OUTPUT1_AWREADY,
        m_axi_sin_out_V_AWADDR => grp_process_frame_fu_52_m_axi_sin_out_V_AWADDR,
        m_axi_sin_out_V_AWID => grp_process_frame_fu_52_m_axi_sin_out_V_AWID,
        m_axi_sin_out_V_AWLEN => grp_process_frame_fu_52_m_axi_sin_out_V_AWLEN,
        m_axi_sin_out_V_AWSIZE => grp_process_frame_fu_52_m_axi_sin_out_V_AWSIZE,
        m_axi_sin_out_V_AWBURST => grp_process_frame_fu_52_m_axi_sin_out_V_AWBURST,
        m_axi_sin_out_V_AWLOCK => grp_process_frame_fu_52_m_axi_sin_out_V_AWLOCK,
        m_axi_sin_out_V_AWCACHE => grp_process_frame_fu_52_m_axi_sin_out_V_AWCACHE,
        m_axi_sin_out_V_AWPROT => grp_process_frame_fu_52_m_axi_sin_out_V_AWPROT,
        m_axi_sin_out_V_AWQOS => grp_process_frame_fu_52_m_axi_sin_out_V_AWQOS,
        m_axi_sin_out_V_AWREGION => grp_process_frame_fu_52_m_axi_sin_out_V_AWREGION,
        m_axi_sin_out_V_AWUSER => grp_process_frame_fu_52_m_axi_sin_out_V_AWUSER,
        m_axi_sin_out_V_WVALID => grp_process_frame_fu_52_m_axi_sin_out_V_WVALID,
        m_axi_sin_out_V_WREADY => DDS_OUTPUT1_WREADY,
        m_axi_sin_out_V_WDATA => grp_process_frame_fu_52_m_axi_sin_out_V_WDATA,
        m_axi_sin_out_V_WSTRB => grp_process_frame_fu_52_m_axi_sin_out_V_WSTRB,
        m_axi_sin_out_V_WLAST => grp_process_frame_fu_52_m_axi_sin_out_V_WLAST,
        m_axi_sin_out_V_WID => grp_process_frame_fu_52_m_axi_sin_out_V_WID,
        m_axi_sin_out_V_WUSER => grp_process_frame_fu_52_m_axi_sin_out_V_WUSER,
        m_axi_sin_out_V_ARVALID => grp_process_frame_fu_52_m_axi_sin_out_V_ARVALID,
        m_axi_sin_out_V_ARREADY => ap_const_logic_0,
        m_axi_sin_out_V_ARADDR => grp_process_frame_fu_52_m_axi_sin_out_V_ARADDR,
        m_axi_sin_out_V_ARID => grp_process_frame_fu_52_m_axi_sin_out_V_ARID,
        m_axi_sin_out_V_ARLEN => grp_process_frame_fu_52_m_axi_sin_out_V_ARLEN,
        m_axi_sin_out_V_ARSIZE => grp_process_frame_fu_52_m_axi_sin_out_V_ARSIZE,
        m_axi_sin_out_V_ARBURST => grp_process_frame_fu_52_m_axi_sin_out_V_ARBURST,
        m_axi_sin_out_V_ARLOCK => grp_process_frame_fu_52_m_axi_sin_out_V_ARLOCK,
        m_axi_sin_out_V_ARCACHE => grp_process_frame_fu_52_m_axi_sin_out_V_ARCACHE,
        m_axi_sin_out_V_ARPROT => grp_process_frame_fu_52_m_axi_sin_out_V_ARPROT,
        m_axi_sin_out_V_ARQOS => grp_process_frame_fu_52_m_axi_sin_out_V_ARQOS,
        m_axi_sin_out_V_ARREGION => grp_process_frame_fu_52_m_axi_sin_out_V_ARREGION,
        m_axi_sin_out_V_ARUSER => grp_process_frame_fu_52_m_axi_sin_out_V_ARUSER,
        m_axi_sin_out_V_RVALID => ap_const_logic_0,
        m_axi_sin_out_V_RREADY => grp_process_frame_fu_52_m_axi_sin_out_V_RREADY,
        m_axi_sin_out_V_RDATA => ap_const_lv16_0,
        m_axi_sin_out_V_RLAST => ap_const_logic_0,
        m_axi_sin_out_V_RID => ap_const_lv1_0,
        m_axi_sin_out_V_RUSER => ap_const_lv1_0,
        m_axi_sin_out_V_RRESP => ap_const_lv2_0,
        m_axi_sin_out_V_BVALID => DDS_OUTPUT1_BVALID,
        m_axi_sin_out_V_BREADY => grp_process_frame_fu_52_m_axi_sin_out_V_BREADY,
        m_axi_sin_out_V_BRESP => DDS_OUTPUT1_BRESP,
        m_axi_sin_out_V_BID => DDS_OUTPUT1_BID,
        m_axi_sin_out_V_BUSER => DDS_OUTPUT1_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_process_frame_fu_52_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_process_frame_fu_52_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
                    ap_reg_grp_process_frame_fu_52_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_process_frame_fu_52_ap_ready)) then 
                    ap_reg_grp_process_frame_fu_52_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                incr_V_read_reg_68 <= incr_V;
                nofSample_read_reg_73 <= nofSample;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_process_frame_fu_52_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = grp_process_frame_fu_52_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    DDS_OUTPUT1_AWVALID_assign_proc : process(grp_process_frame_fu_52_m_axi_sin_out_V_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            DDS_OUTPUT1_AWVALID <= grp_process_frame_fu_52_m_axi_sin_out_V_AWVALID;
        else 
            DDS_OUTPUT1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DDS_OUTPUT1_BREADY_assign_proc : process(grp_process_frame_fu_52_m_axi_sin_out_V_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            DDS_OUTPUT1_BREADY <= grp_process_frame_fu_52_m_axi_sin_out_V_BREADY;
        else 
            DDS_OUTPUT1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DDS_OUTPUT1_WVALID_assign_proc : process(grp_process_frame_fu_52_m_axi_sin_out_V_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            DDS_OUTPUT1_WVALID <= grp_process_frame_fu_52_m_axi_sin_out_V_WVALID;
        else 
            DDS_OUTPUT1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DDS_OUTPUT_AWVALID_assign_proc : process(grp_process_frame_fu_52_m_axi_cos_out_V_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            DDS_OUTPUT_AWVALID <= grp_process_frame_fu_52_m_axi_cos_out_V_AWVALID;
        else 
            DDS_OUTPUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DDS_OUTPUT_BREADY_assign_proc : process(grp_process_frame_fu_52_m_axi_cos_out_V_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            DDS_OUTPUT_BREADY <= grp_process_frame_fu_52_m_axi_cos_out_V_BREADY;
        else 
            DDS_OUTPUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DDS_OUTPUT_WVALID_assign_proc : process(grp_process_frame_fu_52_m_axi_cos_out_V_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            DDS_OUTPUT_WVALID <= grp_process_frame_fu_52_m_axi_cos_out_V_WVALID;
        else 
            DDS_OUTPUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(grp_process_frame_fu_52_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_logic_0 = grp_process_frame_fu_52_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_process_frame_fu_52_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_logic_0 = grp_process_frame_fu_52_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_process_frame_fu_52_ap_start <= ap_reg_grp_process_frame_fu_52_ap_start;
end behav;
