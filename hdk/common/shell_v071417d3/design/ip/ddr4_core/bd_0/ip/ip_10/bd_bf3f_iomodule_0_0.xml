<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>customized_ip</spirit:library>
  <spirit:name>bd_bf3f_iomodule_0_0</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>SLMB</spirit:name>
      <spirit:description>Data Processor Local Bus</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="lmb" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="lmb_rtl" spirit:version="1.0"/>
      <spirit:slave>
        <spirit:memoryMapRef spirit:memoryMapRef="SLMB"/>
      </spirit:slave>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ABUS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LMB_ABus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ADDRSTROBE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LMB_AddrStrobe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LMB_BE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Sl_CE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>READDBUS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Sl_DBus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>READSTROBE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LMB_ReadStrobe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>READY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Sl_Ready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>UE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Sl_UE</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WAIT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Sl_Wait</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WRITEDBUS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LMB_WriteDBus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WRITESTROBE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>LMB_WriteStrobe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ADDR_WIDTH</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SLMB.ADDR_WIDTH">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>DATA_WIDTH</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SLMB.DATA_WIDTH">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>READ_WRITE_MODE</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SLMB.READ_WRITE_MODE">READ_WRITE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>CLK.CLK</spirit:name>
      <spirit:displayName>Clk</spirit:displayName>
      <spirit:description>Clock Input</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Clk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK.CLK.ASSOCIATED_BUSIF">SLMB</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.CLK.CLK.ASSOCIATED_RESET">Rst:TMR_Rst</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:displayName>Clk frequency</spirit:displayName>
          <spirit:description>Clk frequency</spirit:description>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.CLK.CLK.FREQ_HZ">100000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CLK.CLK.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.CLK.CLK.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>RST.Rst</spirit:name>
      <spirit:displayName>Rst</spirit:displayName>
      <spirit:description>Reset Input</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>Rst</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RST.RST.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>TYPE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RST.RST.TYPE">PERIPHERAL</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>RST.TMR_Rst</spirit:name>
      <spirit:displayName>TMR_Rst</spirit:displayName>
      <spirit:description>TMR Reset Input</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>TMR_Rst</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RST.TMR_RST.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>TYPE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RST.TMR_RST.TYPE">PERIPHERAL</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>IO_BUS</spirit:name>
      <spirit:displayName>IO_BUS</spirit:displayName>
      <spirit:description>MicroBlaze MCS IO Bus Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mcsio_bus" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mcsio_bus_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ADDR_STROBE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Addr_Strobe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ADDRESS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Address</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>BYTE_ENABLE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Byte_Enable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>READ_DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Read_Data</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>READ_STROBE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Read_Strobe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>READY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Ready</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WRITE_DATA</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Write_Data</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>WRITE_STROBE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>IO_Write_Strobe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.IO_BUS" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.UART_Interrupt</spirit:name>
      <spirit:displayName>UART_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>UART_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.UART_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.UART_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.FIT1_Interrupt</spirit:name>
      <spirit:displayName>FIT1_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>FIT1_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.FIT1_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.FIT1_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.FIT2_Interrupt</spirit:name>
      <spirit:displayName>FIT2_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>FIT2_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.FIT2_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.FIT2_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.FIT3_Interrupt</spirit:name>
      <spirit:displayName>FIT3_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>FIT3_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.FIT3_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.FIT3_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.FIT4_Interrupt</spirit:name>
      <spirit:displayName>FIT4_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>FIT4_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.FIT4_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.FIT4_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.PIT1_Interrupt</spirit:name>
      <spirit:displayName>PIT1_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>PIT1_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.PIT1_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.PIT1_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.PIT2_Interrupt</spirit:name>
      <spirit:displayName>PIT2_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>PIT2_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.PIT2_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.PIT2_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.PIT3_Interrupt</spirit:name>
      <spirit:displayName>PIT3_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>PIT3_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.PIT3_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.PIT3_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.PIT4_Interrupt</spirit:name>
      <spirit:displayName>PIT4_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>PIT4_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.PIT4_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.PIT4_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.GPI1_Interrupt</spirit:name>
      <spirit:displayName>GPI1_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI1_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.GPI1_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.GPI1_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.GPI2_Interrupt</spirit:name>
      <spirit:displayName>GPI2_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI2_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.GPI2_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.GPI2_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.GPI3_Interrupt</spirit:name>
      <spirit:displayName>GPI3_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI3_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.GPI3_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.GPI3_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.GPI4_Interrupt</spirit:name>
      <spirit:displayName>GPI4_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI4_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.GPI4_INTERRUPT.SENSITIVITY">EDGE_RISING</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.GPI4_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTC_Interrupt</spirit:name>
      <spirit:displayName>INTC_Interrupt</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>INTC_Interrupt</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTC_Interrupt" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTC_Irq_Single</spirit:name>
      <spirit:displayName>INTC_IRQ</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>INTC_IRQ</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTC_IRQ_SINGLE.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTC_Irq_Single" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)) and (spirit:decode(id(&apos;PARAM_VALUE.C_INTC_IRQ_CONNECTION&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTC_Irq</spirit:name>
      <spirit:displayName>INTC_IRQ</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mbinterrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mbinterrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ACK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>INTC_Processor_Ack</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>ADDRESS</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>INTC_Interrupt_Address</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>INTC_IRQ</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTC_IRQ.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>LOW_LATENCY</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INTC_IRQ.LOW_LATENCY">0</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTC_Irq" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)) and (spirit:decode(id(&apos;PARAM_VALUE.C_INTC_IRQ_CONNECTION&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>INTERRUPT.INTC_Irq_Out</spirit:name>
      <spirit:displayName>INTC_IRQ_OUT</spirit:displayName>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>INTC_IRQ_OUT</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT.INTC_IRQ_OUT.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.INTERRUPT.INTC_Irq_Out" xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.C_INTC_USE_IRQ_OUT&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>UART</spirit:name>
      <spirit:displayName>UART</spirit:displayName>
      <spirit:description>UART TX/RX</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="uart" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="uart_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RxD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>UART_Rx</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TxD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>UART_Tx</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.UART.BOARD.ASSOCIATED_PARAM">UART_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.UART" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GPIO1</spirit:name>
      <spirit:displayName>GPIO1</spirit:displayName>
      <spirit:description>General Purpose IO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPO1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>C_USE_GPO1</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO1.C_USE_GPO1" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO1&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO1.C_USE_GPO1" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO1_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO1.C_GPO1_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO1_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO1.C_GPO1_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO1_INIT</spirit:name>
          <spirit:value spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO1.C_GPO1_INIT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO1_INIT&apos;))">0x00000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO1.C_GPO1_INIT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_USE_GPI1</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO1.C_USE_GPI1" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO1.C_USE_GPI1" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI1_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO1.C_GPI1_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO1.C_GPI1_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI1_INTERRUPT</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO1.C_GPI1_INTERRUPT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO1.C_GPI1_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GPIO1.BOARD.ASSOCIATED_PARAM">GPIO1_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GPIO1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO1&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GPIO2</spirit:name>
      <spirit:displayName>GPIO2</spirit:displayName>
      <spirit:description>General Purpose IO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPO2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>C_USE_GPO2</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO2.C_USE_GPO2" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO2&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO2.C_USE_GPO2" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO2_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO2.C_GPO2_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO2_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO2.C_GPO2_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO2_INIT</spirit:name>
          <spirit:value spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO2.C_GPO2_INIT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO2_INIT&apos;))">0x00000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO2.C_GPO2_INIT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_USE_GPI2</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO2.C_USE_GPI2" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO2.C_USE_GPI2" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI2_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO2.C_GPI2_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO2.C_GPI2_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI2_INTERRUPT</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO2.C_GPI2_INTERRUPT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO2.C_GPI2_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GPIO2.BOARD.ASSOCIATED_PARAM">GPIO2_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GPIO2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO2&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GPIO3</spirit:name>
      <spirit:displayName>GPIO3</spirit:displayName>
      <spirit:description>General Purpose IO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPO3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>C_USE_GPO3</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO3.C_USE_GPO3" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO3&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO3.C_USE_GPO3" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO3_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO3.C_GPO3_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO3_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO3.C_GPO3_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO3_INIT</spirit:name>
          <spirit:value spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO3.C_GPO3_INIT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO3_INIT&apos;))">0x00000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO3.C_GPO3_INIT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_USE_GPI3</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO3.C_USE_GPI3" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO3.C_USE_GPI3" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI3_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO3.C_GPI3_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO3.C_GPI3_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI3_INTERRUPT</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO3.C_GPI3_INTERRUPT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO3.C_GPI3_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GPIO3.BOARD.ASSOCIATED_PARAM">GPIO3_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GPIO3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO3&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>GPIO4</spirit:name>
      <spirit:displayName>GPIO4</spirit:displayName>
      <spirit:description>General Purpose IO</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gpio_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPI4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TRI_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>GPO4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>C_USE_GPO4</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO4.C_USE_GPO4" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO4&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO4.C_USE_GPO4" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO4_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO4.C_GPO4_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO4_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO4.C_GPO4_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPO4_INIT</spirit:name>
          <spirit:value spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO4.C_GPO4_INIT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO4_INIT&apos;))">0x00000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO4.C_GPO4_INIT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_USE_GPI4</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO4.C_USE_GPI4" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO4.C_USE_GPI4" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI4_SIZE</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO4.C_GPI4_SIZE" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_SIZE&apos;))">32</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO4.C_GPI4_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>C_GPI4_INTERRUPT</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:id="BUSIFPARAM_VALUE.GPIO4.C_GPI4_INTERRUPT" spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;))">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIFPARAM_ENABLEMENT.GPIO4.C_GPI4_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>BOARD.ASSOCIATED_PARAM</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GPIO4.BOARD.ASSOCIATED_PARAM">GPIO4_BOARD_INTERFACE</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:enablement>
                <xilinx:presence>required</xilinx:presence>
              </xilinx:enablement>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.GPIO4" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO4&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:memoryMaps>
    <spirit:memoryMap>
      <spirit:name>SLMB</spirit:name>
      <spirit:description>LMB memory map</spirit:description>
      <spirit:addressBlock>
        <spirit:name>Reg</spirit:name>
        <spirit:displayName>Reg</spirit:displayName>
        <spirit:description>Register Block</spirit:description>
        <spirit:baseAddress spirit:format="long">0</spirit:baseAddress>
        <spirit:range spirit:format="long" spirit:minimum="2048" spirit:rangeType="long">4096</spirit:range>
        <spirit:width spirit:format="long">32</spirit:width>
        <spirit:usage>register</spirit:usage>
        <spirit:access>read-write</spirit:access>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>OFFSET_BASE_PARAM</spirit:name>
            <spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.SLMB.REG.OFFSET_BASE_PARAM">C_BASEADDR</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>OFFSET_HIGH_PARAM</spirit:name>
            <spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.SLMB.REG.OFFSET_HIGH_PARAM">C_HIGHADDR</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
        <spirit:register>
          <spirit:name>UART RX</spirit:name>
          <spirit:displayName>UART Receive Data Register</spirit:displayName>
          <spirit:description>UART Receive Data Register</spirit:description>
          <spirit:addressOffset>0x0</spirit:addressOffset>
          <spirit:size spirit:format="long">8</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>UART RX</spirit:name>
            <spirit:displayName>Receive Data</spirit:displayName>
            <spirit:description>Data received by the UART.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">8</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:readAction>modify</spirit:readAction>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.UART RX" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>UART TX</spirit:name>
          <spirit:displayName>UART Transmit Data Register</spirit:displayName>
          <spirit:description>UART Transmit Data Register</spirit:description>
          <spirit:addressOffset>0x4</spirit:addressOffset>
          <spirit:size spirit:format="long">8</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>UART TX</spirit:name>
            <spirit:displayName>Transmit Data</spirit:displayName>
            <spirit:description>Data to be transmitted by the UART.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">8</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.UART TX" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>UART Status</spirit:name>
          <spirit:displayName>UART Status Register</spirit:displayName>
          <spirit:description>UART Status Register</spirit:description>
          <spirit:addressOffset>0x8</spirit:addressOffset>
          <spirit:size spirit:format="long">8</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>Rx Valid Data</spirit:name>
            <spirit:displayName>Rx Valid Data</spirit:displayName>
            <spirit:description>Indicates if the receive register has valid data:
  0 - Receive register is empty.
  1 - Receive register has valid data.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>Tx Used</spirit:name>
            <spirit:displayName>Tx Used</spirit:displayName>
            <spirit:description>Indicates if the transmit register is in use:
  0 - Transmit register is not in use.
  1 - Transmit register is in use.
</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>Overrun Error</spirit:name>
            <spirit:displayName>Overrun Error</spirit:displayName>
            <spirit:description>Indicates that an overrun error has occurred:
  0 - No overrun has occurred.
  1 - An overrun has occurred.
</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>Frame Error</spirit:name>
            <spirit:displayName>Frame Error</spirit:displayName>
            <spirit:description>Indicates that an frame error has occurred:
  0 - No frame error has occurred.
  1 - A frame error has occurred.
</spirit:description>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>Parity Error</spirit:name>
            <spirit:displayName>Parity Error</spirit:displayName>
            <spirit:description>Indicates that a parity error has occurred:
  0 - No parity error has occurred.
  1 - A parity error occurred.
</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.UART Status" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ MODE</spirit:name>
          <spirit:displayName>Interrupt Mode Register</spirit:displayName>
          <spirit:description>Interrupt Mode Register</spirit:description>
          <spirit:addressOffset>0xC</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Mode</spirit:name>
            <spirit:displayName>IRQ Mode</spirit:displayName>
            <spirit:description>Interrupt Mode.
For each bit:
  W - When written with 1 the corresponding interrupt will use fast mode.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ MODE" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1)">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPO 1</spirit:name>
          <spirit:displayName>General Purpose Output 1 Register</spirit:displayName>
          <spirit:description>General Purpose Output 1 Register</spirit:description>
          <spirit:addressOffset>0x10</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO1_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO1_INIT&apos;)))">0x00000000</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPO</spirit:name>
            <spirit:displayName>General Purpose Output</spirit:displayName>
            <spirit:description>General Purpose Output.
For each bit:
  W - Writes general purpose output value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO1_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPO 1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO1&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPO 2</spirit:name>
          <spirit:displayName>General Purpose Output 2 Register</spirit:displayName>
          <spirit:description>General Purpose Output 2 Register</spirit:description>
          <spirit:addressOffset>0x14</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO2_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO2_INIT&apos;)))">0x00000000</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPO</spirit:name>
            <spirit:displayName>General Purpose Output</spirit:displayName>
            <spirit:description>General Purpose Output.
For each bit:
  W - Writes general purpose output value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO2_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPO 2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO2&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPO 3</spirit:name>
          <spirit:displayName>General Purpose Output 3 Register</spirit:displayName>
          <spirit:description>General Purpose Output 3 Register</spirit:description>
          <spirit:addressOffset>0x18</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO3_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO3_INIT&apos;)))">0x00000000</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPO</spirit:name>
            <spirit:displayName>General Purpose Output</spirit:displayName>
            <spirit:description>General Purpose Output.
For each bit:
  W - Writes general purpose output value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO3_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPO 3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO3&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPO 4</spirit:name>
          <spirit:displayName>General Purpose Output 4 Register</spirit:displayName>
          <spirit:description>General Purpose Output 4 Register</spirit:description>
          <spirit:addressOffset>0x1C</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO4_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO4_INIT&apos;)))">0x00000000</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPO</spirit:name>
            <spirit:displayName>General Purpose Output</spirit:displayName>
            <spirit:description>General Purpose Output.
For each bit:
  W - Writes general purpose output value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO4_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPO 4" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO4&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPI 1</spirit:name>
          <spirit:displayName>General Purpose Input 1 Register</spirit:displayName>
          <spirit:description>General Purpose Input 1 Register</spirit:description>
          <spirit:addressOffset>0x20</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INIT&apos;)))">0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPI</spirit:name>
            <spirit:displayName>General Purpose Input</spirit:displayName>
            <spirit:description>General Purpose Input.
For each bit:
  R - Reads general purpose input value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPI 1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPI 2</spirit:name>
          <spirit:displayName>General Purpose Input 2 Register</spirit:displayName>
          <spirit:description>General Purpose Input 2 Register</spirit:description>
          <spirit:addressOffset>0x24</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INIT&apos;)))">0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>CPI</spirit:name>
            <spirit:displayName>General Purpose Input</spirit:displayName>
            <spirit:description>General Purpose Input.
For each bit:
  R - Reads general purpose input value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPI 2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPI 3</spirit:name>
          <spirit:displayName>General Purpose Input 3 Register</spirit:displayName>
          <spirit:description>General Purpose Input 3 Register</spirit:description>
          <spirit:addressOffset>0x28</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INIT&apos;)))">0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPI</spirit:name>
            <spirit:displayName>General Purpose Input</spirit:displayName>
            <spirit:description>General Purpose Input.
For each bit:
  R - Reads general purpose input value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPI 3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>GPI 4</spirit:name>
          <spirit:displayName>General Purpose Input 4 Register</spirit:displayName>
          <spirit:description>General Purpose Input 4 Register</spirit:description>
          <spirit:addressOffset>0x2C</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INIT&apos;)))">0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>GPI</spirit:name>
            <spirit:displayName>General Purpose Input</spirit:displayName>
            <spirit:description>General Purpose Input.
For each bit:
  R - Reads general purpose input value.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.GPI 4" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ STATUS</spirit:name>
          <spirit:displayName>Interrupt Status Register</spirit:displayName>
          <spirit:description>Interrupt Status Register</spirit:description>
          <spirit:addressOffset>0x30</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>UART ERR</spirit:name>
            <spirit:displayName>UART Error</spirit:displayName>
            <spirit:description>UART Error interrupt.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>UART TX</spirit:name>
            <spirit:displayName>UART Transmitted Data</spirit:displayName>
            <spirit:description>UART Transmitted Data interrupt.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>UART RX</spirit:name>
            <spirit:displayName>UART Received Data</spirit:displayName>
            <spirit:description>UART Received Data interrupt.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 1</spirit:name>
            <spirit:displayName>PIT 1</spirit:displayName>
            <spirit:description>PIT 1 lapsed.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 2</spirit:name>
            <spirit:displayName>PIT 2</spirit:displayName>
            <spirit:description>PIT 2 lapsed.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 3</spirit:name>
            <spirit:displayName>PIT 3</spirit:displayName>
            <spirit:description>PIT 3 lapsed.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 4</spirit:name>
            <spirit:displayName>PIT 4</spirit:displayName>
            <spirit:description>PIT 4 lapsed.</spirit:description>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 1</spirit:name>
            <spirit:displayName>FIT 1</spirit:displayName>
            <spirit:description>FIT 1 strobe.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 2</spirit:name>
            <spirit:displayName>FIT 2</spirit:displayName>
            <spirit:description>FIT 2 strobe.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 3</spirit:name>
            <spirit:displayName>FIT 3</spirit:displayName>
            <spirit:description>FIT 3 strobe.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 4</spirit:name>
            <spirit:displayName>FIT 4</spirit:displayName>
            <spirit:description>FIT 4 strobe.</spirit:description>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 1</spirit:name>
            <spirit:displayName>GPI 1</spirit:displayName>
            <spirit:description>GPI 1 changed.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 2</spirit:name>
            <spirit:displayName>GPI 2</spirit:displayName>
            <spirit:description>GPI 2 changed.</spirit:description>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 3</spirit:name>
            <spirit:displayName>GPI 3</spirit:displayName>
            <spirit:description>GPI 3 changed.</spirit:description>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 4</spirit:name>
            <spirit:displayName>GPI 4</spirit:displayName>
            <spirit:description>GPI 4 changed.</spirit:description>
            <spirit:bitOffset>14</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>INTC Interrupt</spirit:name>
            <spirit:displayName>External interrupt input signal</spirit:displayName>
            <spirit:description>Interrupt Status Register.
For each bit:
  R - Reads active interrupt signal.
</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)))">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ STATUS" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ PENDING</spirit:name>
          <spirit:displayName>Interrupt Pending Register</spirit:displayName>
          <spirit:description>Interrupt Pending Register</spirit:description>
          <spirit:addressOffset>0x34</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>UART ERR</spirit:name>
            <spirit:displayName>UART Error</spirit:displayName>
            <spirit:description>UART Error interrupt.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>UART TX</spirit:name>
            <spirit:displayName>UART Transmitted Data</spirit:displayName>
            <spirit:description>UART Transmitted Data interrupt.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>UART RX</spirit:name>
            <spirit:displayName>UART Received Data</spirit:displayName>
            <spirit:description>UART Received Data interrupt.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 1</spirit:name>
            <spirit:displayName>PIT 1</spirit:displayName>
            <spirit:description>PIT 1 lapsed.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 2</spirit:name>
            <spirit:displayName>PIT 2</spirit:displayName>
            <spirit:description>PIT 2 lapsed.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 3</spirit:name>
            <spirit:displayName>PIT 3</spirit:displayName>
            <spirit:description>PIT 3 lapsed.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 4</spirit:name>
            <spirit:displayName>PIT 4</spirit:displayName>
            <spirit:description>PIT 4 lapsed.</spirit:description>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 1</spirit:name>
            <spirit:displayName>FIT 1</spirit:displayName>
            <spirit:description>FIT 1 strobe.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 2</spirit:name>
            <spirit:displayName>FIT 2</spirit:displayName>
            <spirit:description>FIT 2 strobe.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 3</spirit:name>
            <spirit:displayName>FIT 3</spirit:displayName>
            <spirit:description>FIT 3 strobe.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 4</spirit:name>
            <spirit:displayName>FIT 4</spirit:displayName>
            <spirit:description>FIT 4 strobe.</spirit:description>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 1</spirit:name>
            <spirit:displayName>GPI 1</spirit:displayName>
            <spirit:description>GPI 1 changed.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 2</spirit:name>
            <spirit:displayName>GPI 2</spirit:displayName>
            <spirit:description>GPI 2 changed.</spirit:description>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 3</spirit:name>
            <spirit:displayName>GPI 3</spirit:displayName>
            <spirit:description>GPI 3 changed.</spirit:description>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 4</spirit:name>
            <spirit:displayName>GPI 4</spirit:displayName>
            <spirit:description>GPI 4 changed.</spirit:description>
            <spirit:bitOffset>14</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>INTC Interrupt</spirit:name>
            <spirit:displayName>Enabled interrupt events that have occurred</spirit:displayName>
            <spirit:description>Interrupt Pending.
For each bit:
  R - Reads enabled interrupt event that has occurred.
</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)))">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ PENDING" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ ENABLE</spirit:name>
          <spirit:displayName>Interrupt Enable Register</spirit:displayName>
          <spirit:description>Interrupt Enable Register</spirit:description>
          <spirit:addressOffset>0x38</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>UART ERR</spirit:name>
            <spirit:displayName>UART Error</spirit:displayName>
            <spirit:description>UART Error interrupt enabled.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>UART TX</spirit:name>
            <spirit:displayName>UART Transmitted Data</spirit:displayName>
            <spirit:description>UART Transmitted Data interrupt enabled.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>UART RX</spirit:name>
            <spirit:displayName>UART Received Data</spirit:displayName>
            <spirit:description>UART Received Data interrupt enabled.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 1</spirit:name>
            <spirit:displayName>PIT 1</spirit:displayName>
            <spirit:description>PIT 1 interrupt enabled.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 2</spirit:name>
            <spirit:displayName>PIT 2</spirit:displayName>
            <spirit:description>PIT 2 interrupt enabled.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 3</spirit:name>
            <spirit:displayName>PIT 3</spirit:displayName>
            <spirit:description>PIT 3 interrupt enabled.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PIT 4</spirit:name>
            <spirit:displayName>PIT 4</spirit:displayName>
            <spirit:description>PIT 4 interrupt enabled.</spirit:description>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 1</spirit:name>
            <spirit:displayName>FIT 1</spirit:displayName>
            <spirit:description>FIT 1 interrupt enabled.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 2</spirit:name>
            <spirit:displayName>FIT 2</spirit:displayName>
            <spirit:description>FIT 2 interrupt enabled.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 3</spirit:name>
            <spirit:displayName>FIT 3</spirit:displayName>
            <spirit:description>FIT 3 interrupt enabled.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>FIT 4</spirit:name>
            <spirit:displayName>FIT 4</spirit:displayName>
            <spirit:description>FIT 4 interrupt enabled.</spirit:description>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 1</spirit:name>
            <spirit:displayName>GPI 1</spirit:displayName>
            <spirit:description>GPI 1 interrupt enabled.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 2</spirit:name>
            <spirit:displayName>GPI 2</spirit:displayName>
            <spirit:description>GPI 2 interrupt enabled.</spirit:description>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 3</spirit:name>
            <spirit:displayName>GPI 3</spirit:displayName>
            <spirit:description>GPI 3 interrupt enabled.</spirit:description>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>GPI 4</spirit:name>
            <spirit:displayName>GPI 4</spirit:displayName>
            <spirit:description>GPI 4 interrupt enabled.</spirit:description>
            <spirit:bitOffset>14</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>INTC Interrupt</spirit:name>
            <spirit:displayName>Enable external interrupt input signals</spirit:displayName>
            <spirit:description>Interrupt Enable.
For each bit:
  W - Enable external interrupt input signal.
</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)))">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ ENABLE" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ ACK</spirit:name>
          <spirit:displayName>Interrupt Acknowledge Register</spirit:displayName>
          <spirit:description>Interrupt Acknowledge Register</spirit:description>
          <spirit:addressOffset>0x3C</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Acknowledge</spirit:name>
            <spirit:displayName>IRQ Acknowledge</spirit:displayName>
            <spirit:description>Interrupt Acknowledge.
For each bit:
  W - When written with 1 clear bit in IRQ_STATUS and IRQ_PENDING.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) + 16)">17</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:modifiedWriteValue>oneToClear</spirit:modifiedWriteValue>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ ACK" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT1 PRELOAD</spirit:name>
          <spirit:displayName>PIT 1 Preload Register</spirit:displayName>
          <spirit:description>PIT 1 Preload Register</spirit:description>
          <spirit:addressOffset>0x40</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT1 Preload</spirit:name>
            <spirit:displayName>PIT1 Preload</spirit:displayName>
            <spirit:description>Determines the initial value of the counter and the timer period.
The period is the value + 2.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT1 PRELOAD" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT1 COUNTER</spirit:name>
          <spirit:displayName>PIT 1 Counter Register</spirit:displayName>
          <spirit:description>PIT 1 Counter Register</spirit:description>
          <spirit:addressOffset>0x44</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT1 Counter</spirit:name>
            <spirit:displayName>PIT1 Counter</spirit:displayName>
            <spirit:description>Samples the current counter value.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT1 COUNTER" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT1 CONTROL</spirit:name>
          <spirit:displayName>PIT 1 Control Register</spirit:displayName>
          <spirit:description>PIT 1 Control Register</spirit:description>
          <spirit:addressOffset>0x48</spirit:addressOffset>
          <spirit:size spirit:format="long">2</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>EN</spirit:name>
            <spirit:displayName>Enable</spirit:displayName>
            <spirit:description>Count Enable:
  0 - Counting Disabled.
  1 - Counting Enabled.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PRELOAD</spirit:name>
            <spirit:displayName>Preload</spirit:displayName>
            <spirit:description>Counter preload:
  0 - Counter counts past zero and then stops.
  1 - Counter automatically reloaded with PIT1_PRELOAD.
</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT1 CONTROL" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>UART BAUD</spirit:name>
          <spirit:displayName>UART Programmable Baud Rate</spirit:displayName>
          <spirit:description>UART Programmable Baud Rate</spirit:description>
          <spirit:addressOffset>0x4C</spirit:addressOffset>
          <spirit:size spirit:format="long">8</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>UART BAUD</spirit:name>
            <spirit:displayName>Baud Rate</spirit:displayName>
            <spirit:description>Programmable UART Baud Rate.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">20</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.UART BAUD" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_PROG_BAUDRATE&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT2 PRELOAD</spirit:name>
          <spirit:displayName>PIT 2 Preload Register</spirit:displayName>
          <spirit:description>PIT 2 Preload Register</spirit:description>
          <spirit:addressOffset>0x50</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT2 Preload</spirit:name>
            <spirit:displayName>PIT2 Preload</spirit:displayName>
            <spirit:description>Determines the initial value of the counter and the timer period.
The period is the value + 2.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT2 PRELOAD" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT2 COUNTER</spirit:name>
          <spirit:displayName>PIT 2 Counter Register</spirit:displayName>
          <spirit:description>PIT 2 Counter Register</spirit:description>
          <spirit:addressOffset>0x54</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT2 Counter</spirit:name>
            <spirit:displayName>PIT2 Counter</spirit:displayName>
            <spirit:description>Samples the current counter value.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT2 COUNTER" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT2 CONTROL</spirit:name>
          <spirit:displayName>PIT 2 Control Register</spirit:displayName>
          <spirit:description>PIT 2 Control Register</spirit:description>
          <spirit:addressOffset>0x58</spirit:addressOffset>
          <spirit:size spirit:format="long">2</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>EN</spirit:name>
            <spirit:displayName>Enable</spirit:displayName>
            <spirit:description>Count Enable:
  0 - Counting Disabled.
  1 - Counting Enabled.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PRELOAD</spirit:name>
            <spirit:displayName>Preload</spirit:displayName>
            <spirit:description>Counter preload:
  0 - Counter counts past zero and then stops.
  1 - Counter automatically reloaded with PIT2_PRELOAD.
</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT2 CONTROL" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT3 PRELOAD</spirit:name>
          <spirit:displayName>PIT 3 Preload Register</spirit:displayName>
          <spirit:description>PIT 3 Preload Register</spirit:description>
          <spirit:addressOffset>0x60</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT3 Preload</spirit:name>
            <spirit:displayName>PIT3 Preload</spirit:displayName>
            <spirit:description>Determines the initial value of the counter and the timer period.
The period is the value + 2.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT3 PRELOAD" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT3 COUNTER</spirit:name>
          <spirit:displayName>PIT 3 Counter Register</spirit:displayName>
          <spirit:description>PIT 3 Counter Register</spirit:description>
          <spirit:addressOffset>0x64</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT3 Counter</spirit:name>
            <spirit:displayName>PIT3 Counter</spirit:displayName>
            <spirit:description>Samples the current counter value.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT3 COUNTER" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT3 CONTROL</spirit:name>
          <spirit:displayName>PIT 3 Control Register</spirit:displayName>
          <spirit:description>PIT 3 Control Register</spirit:description>
          <spirit:addressOffset>0x68</spirit:addressOffset>
          <spirit:size spirit:format="long">2</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>EN</spirit:name>
            <spirit:displayName>Enable</spirit:displayName>
            <spirit:description>Count Enable:
  0 - Counting Disabled.
  1 - Counting Enabled.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PRELOAD</spirit:name>
            <spirit:displayName>Preload</spirit:displayName>
            <spirit:description>Counter preload:
  0 - Counter counts past zero and then stops.
  1 - Counter automatically reloaded with PIT3_PRELOAD.
</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT3 CONTROL" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT4 PRELOAD</spirit:name>
          <spirit:displayName>PIT 4 Preload Register</spirit:displayName>
          <spirit:description>PIT 4 Preload Register</spirit:description>
          <spirit:addressOffset>0x70</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT4 Preload</spirit:name>
            <spirit:displayName>PIT4 Preload</spirit:displayName>
            <spirit:description>Determines the initial value of the counter and the timer period.
The period is the value + 2.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT4 PRELOAD" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT4 COUNTER</spirit:name>
          <spirit:displayName>PIT 4 Counter Register</spirit:displayName>
          <spirit:description>PIT 4 Counter Register</spirit:description>
          <spirit:addressOffset>0x74</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_SIZE&apos;)))">32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>PIT4 Counter</spirit:name>
            <spirit:displayName>PIT4 Counter</spirit:displayName>
            <spirit:description>Samples the current counter value.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_SIZE&apos;)))">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT4 COUNTER" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>PIT4 CONTROL</spirit:name>
          <spirit:displayName>PIT 4 Control Register</spirit:displayName>
          <spirit:description>PIT 4 Control Register</spirit:description>
          <spirit:addressOffset>0x78</spirit:addressOffset>
          <spirit:size spirit:format="long">2</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>EN</spirit:name>
            <spirit:displayName>Enable</spirit:displayName>
            <spirit:description>Count Enable:
  0 - Counting Disabled.
  1 - Counting Enabled.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:field>
            <spirit:name>PRELOAD</spirit:name>
            <spirit:displayName>Preload</spirit:displayName>
            <spirit:description>Counter preload:
  0 - Counter counts past zero and then stops.
  1 - Counter automatically reloaded with PIT4_PRELOAD.
</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.PIT4 CONTROL" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 0</spirit:name>
          <spirit:displayName>Interrupt Vector Register 0</spirit:displayName>
          <spirit:description>Interrupt Vector Register 0</spirit:description>
          <spirit:addressOffset>0x80</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 0 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1))">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 1</spirit:name>
          <spirit:displayName>Interrupt Vector Register 1</spirit:displayName>
          <spirit:description>Interrupt Vector Register 1</spirit:description>
          <spirit:addressOffset>0x84</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 1 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 2</spirit:name>
          <spirit:displayName>Interrupt Vector Register 2</spirit:displayName>
          <spirit:description>Interrupt Vector Register 2</spirit:description>
          <spirit:addressOffset>0x88</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 2 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 3</spirit:name>
          <spirit:displayName>Interrupt Vector Register 3</spirit:displayName>
          <spirit:description>Interrupt Vector Register 3</spirit:description>
          <spirit:addressOffset>0x8C</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 3 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 4</spirit:name>
          <spirit:displayName>Interrupt Vector Register 4</spirit:displayName>
          <spirit:description>Interrupt Vector Register 4</spirit:description>
          <spirit:addressOffset>0x90</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 4 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 4" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 5</spirit:name>
          <spirit:displayName>Interrupt Vector Register 5</spirit:displayName>
          <spirit:description>Interrupt Vector Register 5</spirit:description>
          <spirit:addressOffset>0x94</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 5 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 5" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 6</spirit:name>
          <spirit:displayName>Interrupt Vector Register 6</spirit:displayName>
          <spirit:description>Interrupt Vector Register 6</spirit:description>
          <spirit:addressOffset>0x98</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 6 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 6" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 7</spirit:name>
          <spirit:displayName>Interrupt Vector Register 7</spirit:displayName>
          <spirit:description>Interrupt Vector Register 7</spirit:description>
          <spirit:addressOffset>0x9C</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 7 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 7" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT1&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 8</spirit:name>
          <spirit:displayName>Interrupt Vector Register 8</spirit:displayName>
          <spirit:description>Interrupt Vector Register 8</spirit:description>
          <spirit:addressOffset>0xA0</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 8 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 8" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT2&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 9</spirit:name>
          <spirit:displayName>Interrupt Vector Register 9</spirit:displayName>
          <spirit:description>Interrupt Vector Register 9</spirit:description>
          <spirit:addressOffset>0xA4</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 9 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 9" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT3&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 10</spirit:name>
          <spirit:displayName>Interrupt Vector Register 10</spirit:displayName>
          <spirit:description>Interrupt Vector Register 10</spirit:description>
          <spirit:addressOffset>0xA8</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 10 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 10" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT4&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 11</spirit:name>
          <spirit:displayName>Interrupt Vector Register 11</spirit:displayName>
          <spirit:description>Interrupt Vector Register 11</spirit:description>
          <spirit:addressOffset>0xAC</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 11 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 11" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 12</spirit:name>
          <spirit:displayName>Interrupt Vector Register 12</spirit:displayName>
          <spirit:description>Interrupt Vector Register 12</spirit:description>
          <spirit:addressOffset>0xB0</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 12 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 12" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 13</spirit:name>
          <spirit:displayName>Interrupt Vector Register 13</spirit:displayName>
          <spirit:description>Interrupt Vector Register 13</spirit:description>
          <spirit:addressOffset>0xB4</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 13 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 13" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 14</spirit:name>
          <spirit:displayName>Interrupt Vector Register 14</spirit:displayName>
          <spirit:description>Interrupt Vector Register 14</spirit:description>
          <spirit:addressOffset>0xB8</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 14 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 14" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 16</spirit:name>
          <spirit:displayName>Interrupt Vector Register 16</spirit:displayName>
          <spirit:description>Interrupt Vector Register 16</spirit:description>
          <spirit:addressOffset>0xC0</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 16 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 16" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 1)">true</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 17</spirit:name>
          <spirit:displayName>Interrupt Vector Register 17</spirit:displayName>
          <spirit:description>Interrupt Vector Register 17</spirit:description>
          <spirit:addressOffset>0xC4</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 17 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 17" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 2)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 18</spirit:name>
          <spirit:displayName>Interrupt Vector Register 18</spirit:displayName>
          <spirit:description>Interrupt Vector Register 18</spirit:description>
          <spirit:addressOffset>0xC8</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 18 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 18" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 3)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 19</spirit:name>
          <spirit:displayName>Interrupt Vector Register 19</spirit:displayName>
          <spirit:description>Interrupt Vector Register 19</spirit:description>
          <spirit:addressOffset>0xCC</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 19 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 19" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 4)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 20</spirit:name>
          <spirit:displayName>Interrupt Vector Register 20</spirit:displayName>
          <spirit:description>Interrupt Vector Register 20</spirit:description>
          <spirit:addressOffset>0xD0</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 20 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 20" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 5)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 21</spirit:name>
          <spirit:displayName>Interrupt Vector Register 21</spirit:displayName>
          <spirit:description>Interrupt Vector Register 21</spirit:description>
          <spirit:addressOffset>0xD4</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 21 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 21" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 6)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 22</spirit:name>
          <spirit:displayName>Interrupt Vector Register 22</spirit:displayName>
          <spirit:description>Interrupt Vector Register 22</spirit:description>
          <spirit:addressOffset>0xD8</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 22 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 22" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 7)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 23</spirit:name>
          <spirit:displayName>Interrupt Vector Register 23</spirit:displayName>
          <spirit:description>Interrupt Vector Register 23</spirit:description>
          <spirit:addressOffset>0xDC</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 23 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 23" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 8)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 24</spirit:name>
          <spirit:displayName>Interrupt Vector Register 24</spirit:displayName>
          <spirit:description>Interrupt Vector Register 24</spirit:description>
          <spirit:addressOffset>0xE0</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 24 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 24" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 9)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 25</spirit:name>
          <spirit:displayName>Interrupt Vector Register 25</spirit:displayName>
          <spirit:description>Interrupt Vector Register 25</spirit:description>
          <spirit:addressOffset>0xE4</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 25 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 25" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 10)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 26</spirit:name>
          <spirit:displayName>Interrupt Vector Register 26</spirit:displayName>
          <spirit:description>Interrupt Vector Register 26</spirit:description>
          <spirit:addressOffset>0xE8</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 26 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 26" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 11)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 27</spirit:name>
          <spirit:displayName>Interrupt Vector Register 27</spirit:displayName>
          <spirit:description>Interrupt Vector Register 27</spirit:description>
          <spirit:addressOffset>0xEC</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 27 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 27" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 12)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 28</spirit:name>
          <spirit:displayName>Interrupt Vector Register 28</spirit:displayName>
          <spirit:description>Interrupt Vector Register 28</spirit:description>
          <spirit:addressOffset>0xF0</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 28 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 28" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 13)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 29</spirit:name>
          <spirit:displayName>Interrupt Vector Register 29</spirit:displayName>
          <spirit:description>Interrupt Vector Register 29</spirit:description>
          <spirit:addressOffset>0xF4</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 29 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 29" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 14)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 30</spirit:name>
          <spirit:displayName>Interrupt Vector Register 30</spirit:displayName>
          <spirit:description>Interrupt Vector Register 30</spirit:description>
          <spirit:addressOffset>0xF8</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 30 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 30" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 15)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>IRQ VECTOR 31</spirit:name>
          <spirit:displayName>Interrupt Vector Register 31</spirit:displayName>
          <spirit:description>Interrupt Vector Register 31</spirit:description>
          <spirit:addressOffset>0xFC</spirit:addressOffset>
          <spirit:size spirit:format="long" spirit:resolve="dependent">1</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>write-only</spirit:access>
          <spirit:reset>
            <spirit:value spirit:format="long">0x0</spirit:value>
          </spirit:reset>
          <spirit:field>
            <spirit:name>IRQ Vector</spirit:name>
            <spirit:displayName>Interrupt Vector Address</spirit:displayName>
            <spirit:description>Interrupt vector address of active interrupt 31 with highest priority.
</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth spirit:format="long">32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>write-only</spirit:access>
            <spirit:writeValueConstraint>
              <spirit:minimum>0</spirit:minimum>
              <spirit:maximum>0</spirit:maximum>
            </spirit:writeValueConstraint>
            <spirit:testable spirit:testConstraint="unconstrained">false</spirit:testable>
          </spirit:field>
          <spirit:vendorExtensions>
            <xilinx:registerInfo>
              <xilinx:enablement>
                <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="REGISTER_ENABLEMENT.SLMB.REG.IRQ VECTOR 31" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) >= 16)">false</xilinx:isEnabled>
              </xilinx:enablement>
            </xilinx:registerInfo>
          </spirit:vendorExtensions>
        </spirit:register>
      </spirit:addressBlock>
      <spirit:addressBlock>
        <spirit:name>IO</spirit:name>
        <spirit:baseAddress spirit:format="long">0</spirit:baseAddress>
        <spirit:range spirit:format="long" spirit:minimum="4096" spirit:rangeType="long">65536</spirit:range>
        <spirit:width spirit:format="long">32</spirit:width>
        <spirit:usage>register</spirit:usage>
        <spirit:access>read-write</spirit:access>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>OFFSET_BASE_PARAM</spirit:name>
            <spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.SLMB.IO.OFFSET_BASE_PARAM">C_IO_BASEADDR</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>OFFSET_HIGH_PARAM</spirit:name>
            <spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.SLMB.IO.OFFSET_HIGH_PARAM">C_IO_HIGHADDR</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
        <spirit:vendorExtensions>
          <xilinx:addressBlockInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="ADDRBLOCK_ENABLEMENT.SLMB.IO" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:addressBlockInfo>
        </spirit:vendorExtensions>
      </spirit:addressBlock>
    </spirit:memoryMap>
  </spirit:memoryMaps>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_vhdlsynthesis</spirit:name>
        <spirit:displayName>VHDL Synthesis</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlsynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 09 18:26:56 UTC 2017</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>7:abd47548</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_synthesisconstraints</spirit:name>
        <spirit:displayName>Synthesis Constraints</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis.constraints</spirit:envIdentifier>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>7:abd47548</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_vhdlsynthesiswrapper</spirit:name>
        <spirit:displayName>VHDL Synthesis Wrapper</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:synthesis.wrapper</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlsynthesiswrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 09 18:26:56 UTC 2017</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>7:abd47548</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_vhdlbehavioralsimulation</spirit:name>
        <spirit:displayName>VHDL Simulation</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:simulation</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlbehavioralsimulation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 09 18:26:56 UTC 2017</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>7:7cd419ed</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_vhdlsimulationwrapper</spirit:name>
        <spirit:displayName>VHDL Simulation Wrapper</spirit:displayName>
        <spirit:envIdentifier>vhdlSource:vivado.xilinx.com:simulation.wrapper</spirit:envIdentifier>
        <spirit:language>vhdl</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_vhdlsimulationwrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 09 18:26:56 UTC 2017</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>7:7cd419ed</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_implementation</spirit:name>
        <spirit:displayName>Implementation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:implementation</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_implementation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 09 18:26:57 UTC 2017</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>7:abd47548</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>Clk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Rst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Config_Reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="bitString" spirit:bitStringLength="1">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.Config_Reset" xilinx:dependency="false">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>TMR_Rst</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.TMR_Rst" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TMR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>TMR_Disable</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.TMR_Disable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_TMR&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TMR_DISABLE&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>ToVote</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1023</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.ToVote" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TMR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FromAVote</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1023</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FromAVote" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TMR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FromBVote</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1023</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FromBVote" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_TMR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Addr_Strobe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Addr_Strobe" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Read_Strobe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Read_Strobe" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Write_Strobe</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Write_Strobe" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Address</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_AWIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Address" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Byte_Enable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_DWIDTH&apos;)) / 8) - 1)">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Byte_Enable" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Write_Data</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_DWIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Write_Data" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Read_Data</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_DWIDTH&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Read_Data" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>IO_Ready</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.IO_Ready" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>UART_Rx</spirit:name>
        <spirit:displayName>Serial Data In</spirit:displayName>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.UART_Rx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>UART_Tx</spirit:name>
        <spirit:displayName>Serial Data Out</spirit:displayName>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.UART_Tx" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>UART_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.UART_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT1_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT1_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT1_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT1_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT1&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT2_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT2_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT2_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT2_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT2&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT3_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT3_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT3_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT3_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT3&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT4_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT4_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>FIT4_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.FIT4_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT4&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT1_Enable</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT1_Enable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_PRESCALER&apos;)) = 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT1_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT1_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT1_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT1_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT2_Enable</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT2_Enable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_PRESCALER&apos;)) = 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT2_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT2_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT2_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT2_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT3_Enable</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT3_Enable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_PRESCALER&apos;)) = 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT3_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT3_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT3_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT3_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT4_Enable</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT4_Enable" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_PRESCALER&apos;)) = 9)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT4_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT4_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>PIT4_Toggle</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.PIT4_Toggle" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPO1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO1_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPO1" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPO2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO2_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPO2" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPO3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO3_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPO3" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPO4</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPO4_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPO4" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI1" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI1_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI1_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI2" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI2_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI2_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI3" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI3_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI3_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI4</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_SIZE&apos;)) - 1)">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI4" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>GPI4_Interrupt</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.GPI4_Interrupt" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>INTC_Interrupt</spirit:name>
        <spirit:displayName>Interrupt Inputs</spirit:displayName>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_INTR_SIZE&apos;)) - 1)">0</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.INTC_Interrupt" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>INTC_IRQ</spirit:name>
        <spirit:displayName>Interrupt Request Output</spirit:displayName>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.INTC_IRQ" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>INTC_Processor_Ack</spirit:name>
        <spirit:displayName>Interrupt Acknowledgement Input</spirit:displayName>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.INTC_Processor_Ack" xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;PARAM_VALUE.C_INTC_IRQ_CONNECTION&apos;)) = 0) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>INTC_Interrupt_Address</spirit:name>
        <spirit:displayName>Interrupt Vector Address Output</spirit:displayName>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">31</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.INTC_Interrupt_Address" xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 1) and (spirit:decode(id(&apos;PARAM_VALUE.C_INTC_IRQ_CONNECTION&apos;)) = 0) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>INTC_IRQ_OUT</spirit:name>
        <spirit:displayName>Interrupt Request Output</spirit:displayName>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.INTC_IRQ_OUT" xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.C_INTC_USE_IRQ_OUT&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_RX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_TX_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_FIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT1_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT2_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT3_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_PIT4_INTERRUPT&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI1_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI2_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI3_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_GPI4_INTERRUPT&apos;)) > 0) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>LMB_ABus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_AWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>LMB_WriteDBus</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_DWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>LMB_AddrStrobe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>LMB_ReadStrobe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>LMB_WriteStrobe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>LMB_BE</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_DWIDTH&apos;)) / 8) - 1)">3</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_DBus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">0</spirit:left>
            <spirit:right spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_LMB_DWIDTH&apos;)) - 1)">31</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_Ready</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_Wait</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_UE</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>Sl_CE</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_vhdlsynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_vhdlbehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="string">
        <spirit:name>C_FAMILY</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FAMILY">virtexuplus</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FREQ</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FREQ">100000000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>C_INSTANCE</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INSTANCE">iomodule</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_CONFIG_RESET</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_CONFIG_RESET">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_AVOID_PRIMITIVES</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_AVOID_PRIMITIVES">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_TMR</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_TMR">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_TMR_DISABLE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_TMR_DISABLE">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_HIGHADDR</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_HIGHADDR" spirit:bitStringLength="64">0x000000008000FFFF</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_BASEADDR</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_BASEADDR" spirit:bitStringLength="64">0x0000000080000000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_MASK</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_MASK" spirit:bitStringLength="64">0x00000000C0000000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_IO_HIGHADDR</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IO_HIGHADDR" spirit:bitStringLength="64">0x00000000FFFFFFFF</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_IO_HIGHADDR" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_IO_BASEADDR</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IO_BASEADDR" spirit:bitStringLength="64">0x00000000C0000000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_IO_BASEADDR" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_IO_MASK</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_IO_MASK" spirit:bitStringLength="64">0x00000000C0000000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_IO_MASK" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_IO_BUS&apos;)) = 1">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LMB_AWIDTH</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LMB_AWIDTH" spirit:minimum="32" spirit:maximum="64" spirit:rangeType="long">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_LMB_DWIDTH</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_LMB_DWIDTH">32</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_IO_BUS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_IO_BUS">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_UART_RX</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_UART_RX">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_UART_TX</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_UART_TX">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_BAUDRATE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_BAUDRATE">9600</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_BAUDRATE" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_DATA_BITS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_DATA_BITS" spirit:minimum="5" spirit:maximum="8" spirit:rangeType="long">8</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_DATA_BITS" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_USE_PARITY</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_USE_PARITY">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_USE_PARITY" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_ODD_PARITY</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_ODD_PARITY">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_ODD_PARITY" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_UART_USE_PARITY&apos;)) >= 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_RX_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_RX_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_RX_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_TX_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_TX_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_TX_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_ERROR_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_ERROR_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_ERROR_INTERRUPT" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_UART_PROG_BAUDRATE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_UART_PROG_BAUDRATE">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_UART_PROG_BAUDRATE" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_RX&apos;)) = 1) or (spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_UART_TX&apos;)) = 1)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_FIT1</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_FIT1">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT1_No_CLOCKS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT1_No_CLOCKS" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT1_No_CLOCKS" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT1_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT1_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT1_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_FIT2</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_FIT2">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT2_No_CLOCKS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT2_No_CLOCKS" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT2_No_CLOCKS" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT2_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT2_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT2_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_FIT3</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_FIT3">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT3_No_CLOCKS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT3_No_CLOCKS" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT3_No_CLOCKS" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT3_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT3_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT3_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_FIT4</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_FIT4">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT4_No_CLOCKS</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT4_No_CLOCKS" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT4_No_CLOCKS" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_FIT4_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_FIT4_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_FIT4_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_FIT4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_PIT1</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_PIT1">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT1_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT1_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT1_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT1_READABLE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT1_READABLE">1</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT1_READABLE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT1_PRESCALER</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT1_PRESCALER" spirit:minimum="0" spirit:maximum="9" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT1_PRESCALER" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT1_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT1_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT1_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_PIT2</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_PIT2">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT2_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT2_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT2_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT2_READABLE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT2_READABLE">1</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT2_READABLE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT2_PRESCALER</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT2_PRESCALER" spirit:minimum="0" spirit:maximum="9" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT2_PRESCALER" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT2_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT2_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT2_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_PIT3</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_PIT3">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT3_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT3_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT3_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT3_READABLE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT3_READABLE">1</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT3_READABLE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT3_PRESCALER</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT3_PRESCALER" spirit:minimum="0" spirit:maximum="9" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT3_PRESCALER" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT3_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT3_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT3_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_PIT4</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_PIT4">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT4_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT4_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT4_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT4_READABLE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT4_READABLE">1</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT4_READABLE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT4_PRESCALER</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT4_PRESCALER" spirit:minimum="0" spirit:maximum="9" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT4_PRESCALER" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PIT4_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PIT4_INTERRUPT">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_PIT4_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_PIT4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPO1</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPO1">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPO1_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO1_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO1_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
        <spirit:name>C_GPO1_INIT</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO1_INIT" spirit:bitStringLength="32">0x00000000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO1_INIT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPO2</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPO2">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPO2_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO2_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO2_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
        <spirit:name>C_GPO2_INIT</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO2_INIT" spirit:bitStringLength="32">0x00000000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO2_INIT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPO3</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPO3">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPO3_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO3_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO3_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
        <spirit:name>C_GPO3_INIT</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO3_INIT" spirit:bitStringLength="32">0x00000000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO3_INIT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPO4</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPO4">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPO4_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO4_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO4_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
        <spirit:name>C_GPO4_INIT</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPO4_INIT" spirit:bitStringLength="32">0x00000000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPO4_INIT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPO4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPI1</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPI1">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI1_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI1_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI1_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI1_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI1_INTERRUPT" spirit:minimum="0" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI1_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI1&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPI2</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPI2">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI2_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI2_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI2_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI2_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI2_INTERRUPT" spirit:minimum="0" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI2_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI2&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPI3</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPI3">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI3_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI3_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI3_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI3_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI3_INTERRUPT" spirit:minimum="0" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI3_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI3&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_USE_GPI4</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_USE_GPI4">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI4_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI4_SIZE" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI4_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_GPI4_INTERRUPT</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_GPI4_INTERRUPT" spirit:minimum="0" spirit:maximum="3" spirit:rangeType="long">0</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_GPI4_INTERRUPT" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_GPI4&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_INTC_USE_EXT_INTR</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_USE_EXT_INTR">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_INTC_INTR_SIZE</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_INTR_SIZE" spirit:minimum="1" spirit:maximum="16" spirit:rangeType="long">1</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_INTC_INTR_SIZE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(15 downto 0)">
        <spirit:name>C_INTC_LEVEL_EDGE</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_LEVEL_EDGE" spirit:bitStringLength="16">0x0000</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_INTC_LEVEL_EDGE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(15 downto 0)">
        <spirit:name>C_INTC_POSITIVE</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_POSITIVE" spirit:bitStringLength="16">0xFFFF</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_INTC_POSITIVE" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_INTC_HAS_FAST</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_HAS_FAST" spirit:maximum="1" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_INTC_ADDR_WIDTH</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_ADDR_WIDTH" spirit:minimum="5" spirit:maximum="32" spirit:rangeType="long">17</spirit:value>
        <spirit:vendorExtensions>
          <xilinx:parameterInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="MODELPARAM_ENABLEMENT.C_INTC_ADDR_WIDTH" xilinx:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_INTC_USE_EXT_INTR&apos;)) = 1">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:parameterInfo>
        </spirit:vendorExtensions>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector">
        <spirit:name>C_INTC_BASE_VECTORS</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_BASE_VECTORS" spirit:bitStringLength="32">0x00000000</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="std_logic_vector(15 downto 0)">
        <spirit:name>C_INTC_ASYNC_INTR</spirit:name>
        <spirit:value spirit:format="bitString" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_ASYNC_INTR" spirit:bitStringLength="16">0xFFFF</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_INTC_NUM_SYNC_FF</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_INTC_NUM_SYNC_FF" spirit:minimum="0" spirit:maximum="7" spirit:rangeType="long">2</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choice_list_6fc15197</spirit:name>
      <spirit:enumeration>32</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_ac75ef1e</spirit:name>
      <spirit:enumeration>Custom</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_f585525a</spirit:name>
      <spirit:enumeration>110</spirit:enumeration>
      <spirit:enumeration>300</spirit:enumeration>
      <spirit:enumeration>1200</spirit:enumeration>
      <spirit:enumeration>2400</spirit:enumeration>
      <spirit:enumeration>4800</spirit:enumeration>
      <spirit:enumeration>9600</spirit:enumeration>
      <spirit:enumeration>19200</spirit:enumeration>
      <spirit:enumeration>38400</spirit:enumeration>
      <spirit:enumeration>57600</spirit:enumeration>
      <spirit:enumeration>115200</spirit:enumeration>
      <spirit:enumeration>128000</spirit:enumeration>
      <spirit:enumeration>230400</spirit:enumeration>
      <spirit:enumeration>460800</spirit:enumeration>
      <spirit:enumeration>921600</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_007f01e9</spirit:name>
      <spirit:enumeration spirit:text="None">0</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT1">1</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT2">2</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT3">3</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT4">4</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT1">5</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT3">7</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT4">8</spirit:enumeration>
      <spirit:enumeration spirit:text="External">9</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_4847022f</spirit:name>
      <spirit:enumeration spirit:text="None">0</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT1">1</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT2">2</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT3">3</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT4">4</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT1">5</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT2">6</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT4">8</spirit:enumeration>
      <spirit:enumeration spirit:text="External">9</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_4873554b</spirit:name>
      <spirit:enumeration spirit:text="false">0</spirit:enumeration>
      <spirit:enumeration spirit:text="true">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_5f1e379e</spirit:name>
      <spirit:enumeration spirit:text="None">0</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT1">1</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT2">2</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT3">3</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT4">4</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT1">5</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT2">6</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT3">7</spirit:enumeration>
      <spirit:enumeration spirit:text="External">9</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_7ba91213</spirit:name>
      <spirit:enumeration spirit:text="None">0</spirit:enumeration>
      <spirit:enumeration spirit:text="Both Edges">1</spirit:enumeration>
      <spirit:enumeration spirit:text="Rising Edge">2</spirit:enumeration>
      <spirit:enumeration spirit:text="Falling Edge">3</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_d4609148</spirit:name>
      <spirit:enumeration spirit:text="Bus">0</spirit:enumeration>
      <spirit:enumeration spirit:text="Single">1</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_f0f6eb36</spirit:name>
      <spirit:enumeration spirit:text="None">0</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT1">1</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT2">2</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT3">3</spirit:enumeration>
      <spirit:enumeration spirit:text="FIT4">4</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT2">6</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT3">7</spirit:enumeration>
      <spirit:enumeration spirit:text="PIT4">8</spirit:enumeration>
      <spirit:enumeration spirit:text="External">9</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_ffa336e4</spirit:name>
      <spirit:enumeration spirit:text="Even">0</spirit:enumeration>
      <spirit:enumeration spirit:text="Odd">1</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlsynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>hdl/iomodule_v3_1_vh_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>iomodule_v3_1_0</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlsynthesiswrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>synth/bd_bf3f_iomodule_0_0.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlbehavioralsimulation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>hdl/iomodule_v3_1_vh_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_ipstatic</spirit:userFileType>
        <spirit:logicalName>iomodule_v3_1_0</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_vhdlsimulationwrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>sim/bd_bf3f_iomodule_0_0.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_implementation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>bd_bf3f_iomodule_0_0_board.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:userFileType>USED_IN_board</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>LMB module which includes plenty of I/O peripherals</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>C_USE_CONFIG_RESET</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_CONFIG_RESET" spirit:order="1110" spirit:configGroups="1 NoDisplay">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_AVOID_PRIMITIVES</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_AVOID_PRIMITIVES" spirit:order="1120" spirit:configGroups="1 NoDisplay">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_TMR</spirit:name>
      <spirit:displayName>Use Triple Modular Redundancy</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_TMR" spirit:choiceRef="choice_pairs_4873554b" spirit:order="1125" spirit:configGroups="1 System">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_TMR_DISABLE</spirit:name>
      <spirit:displayName>Activate TMR Disable Input</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_TMR_DISABLE" spirit:choiceRef="choice_pairs_4873554b" spirit:order="1128" spirit:configGroups="1 System">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_USE_TMR_DISABLE">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FREQ</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FREQ" spirit:order="1090" spirit:configGroups="1 System">100000000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INSTANCE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.C_INSTANCE" spirit:order="1100" spirit:configGroups="1 System">iomodule</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_BASE_VECTORS</spirit:name>
      <spirit:displayName>MicroBlaze Relocatable Base Vector Value</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_BASE_VECTORS" spirit:order="1130" spirit:configGroups="1 NoDisplay" spirit:bitStringLength="32">0x00000000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_BASEADDR</spirit:name>
      <spirit:displayName>I/O Module Register Base Address</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_BASEADDR" spirit:order="1000" spirit:configGroups="1 System" spirit:bitStringLength="64">0x0000000080000000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_HIGHADDR</spirit:name>
      <spirit:displayName>I/O Module Register High Address</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_HIGHADDR" spirit:order="1010" spirit:configGroups="1 System" spirit:bitStringLength="64">0x000000008000FFFF</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_MASK</spirit:name>
      <spirit:displayName>I/O Module Register Address Decode Mask</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_MASK" spirit:order="1020" spirit:configGroups="1 System" spirit:bitStringLength="64">0x00000000C0000000</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_IO_BUS</spirit:name>
      <spirit:displayName>Enable IO Bus</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_IO_BUS" spirit:choiceRef="choice_pairs_4873554b" spirit:order="1030" spirit:configGroups="1 System">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IO_BASEADDR</spirit:name>
      <spirit:displayName>I/O Module IO Bus Base Address</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IO_BASEADDR" spirit:order="1040" spirit:configGroups="1 System" spirit:bitStringLength="64">0x00000000C0000000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_IO_BASEADDR" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IO_HIGHADDR</spirit:name>
      <spirit:displayName>I/O Module IO Bus High Address</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IO_HIGHADDR" spirit:order="1050" spirit:configGroups="1 System" spirit:bitStringLength="64">0x00000000FFFFFFFF</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_IO_HIGHADDR" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_IO_MASK</spirit:name>
      <spirit:displayName>I/O Module IO Bus Address Decode Mask</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_IO_MASK" spirit:order="1060" spirit:configGroups="1 System" spirit:bitStringLength="64">0x00000000C0000000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_IO_MASK" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LMB_AWIDTH</spirit:name>
      <spirit:displayName>LMB Address Bus Width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LMB_AWIDTH" spirit:order="1070" spirit:configGroups="1 System" spirit:minimum="32" spirit:maximum="64" spirit:rangeType="long">32</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_LMB_DWIDTH</spirit:name>
      <spirit:displayName>LMB Data Bus Width</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_LMB_DWIDTH" spirit:choiceRef="choice_list_6fc15197" spirit:order="1080" spirit:configGroups="1 System">32</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_UART_RX</spirit:name>
      <spirit:displayName>Enable Receiver</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_UART_RX" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2000" spirit:configGroups="2 UART">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_UART_TX</spirit:name>
      <spirit:displayName>Enable Transmitter</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_UART_TX" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2100" spirit:configGroups="2 UART">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_BAUDRATE</spirit:name>
      <spirit:displayName>Define Baud Rate</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_BAUDRATE" spirit:choiceRef="choice_list_f585525a" spirit:order="2200" spirit:configGroups="2 UART">9600</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_BAUDRATE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_PROG_BAUDRATE</spirit:name>
      <spirit:displayName>Programmable Baud Rate</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_PROG_BAUDRATE" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2300" spirit:configGroups="2 UART">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_PROG_BAUDRATE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_DATA_BITS</spirit:name>
      <spirit:displayName>Number of Data Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_DATA_BITS" spirit:order="2400" spirit:configGroups="2 UART" spirit:minimum="5" spirit:maximum="8" spirit:rangeType="long">8</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_DATA_BITS" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_USE_PARITY</spirit:name>
      <spirit:displayName>Use Parity</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_USE_PARITY" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2500" spirit:configGroups="2 UART">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_USE_PARITY" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_ODD_PARITY</spirit:name>
      <spirit:displayName>Even or Odd Parity</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_ODD_PARITY" spirit:choiceRef="choice_pairs_ffa336e4" spirit:order="2600" spirit:configGroups="2 UART">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_ODD_PARITY" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_RX_INTERRUPT</spirit:name>
      <spirit:displayName>Implement Receive Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_RX_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2700" spirit:configGroups="2 UART">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_RX_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_TX_INTERRUPT</spirit:name>
      <spirit:displayName>Implement Transmit Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_TX_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2800" spirit:configGroups="2 UART">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_TX_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_UART_ERROR_INTERRUPT</spirit:name>
      <spirit:displayName>Implement Error Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_UART_ERROR_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="2900" spirit:configGroups="2 UART">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_UART_ERROR_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_FIT1</spirit:name>
      <spirit:displayName>Use FIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_FIT1" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3010" spirit:configGroups="3 FIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT1_No_CLOCKS</spirit:name>
      <spirit:displayName>Number of Clocks Between Strobes</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT1_No_CLOCKS" spirit:order="3020" spirit:configGroups="3 FIT" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT1_No_CLOCKS" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT1_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT1_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3030" spirit:configGroups="3 FIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT1_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_FIT2</spirit:name>
      <spirit:displayName>Use FIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_FIT2" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3040" spirit:configGroups="3 FIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT2_No_CLOCKS</spirit:name>
      <spirit:displayName>Number of Clocks Between Strobes</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT2_No_CLOCKS" spirit:order="3050" spirit:configGroups="3 FIT" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT2_No_CLOCKS" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT2_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT2_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3060" spirit:configGroups="3 FIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT2_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_FIT3</spirit:name>
      <spirit:displayName>Use FIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_FIT3" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3070" spirit:configGroups="3 FIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT3_No_CLOCKS</spirit:name>
      <spirit:displayName>Number of Clocks Between Strobes</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT3_No_CLOCKS" spirit:order="3080" spirit:configGroups="3 FIT" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT3_No_CLOCKS" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT3_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT3_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3090" spirit:configGroups="3 FIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT3_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_FIT4</spirit:name>
      <spirit:displayName>Use FIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_FIT4" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3100" spirit:configGroups="3 FIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT4_No_CLOCKS</spirit:name>
      <spirit:displayName>Number of Clocks Between Strobes</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT4_No_CLOCKS" spirit:order="3110" spirit:configGroups="3 FIT" spirit:minimum="3" spirit:maximum="2147483647" spirit:rangeType="long">6216</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT4_No_CLOCKS" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_FIT4_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_FIT4_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="3120" spirit:configGroups="3 FIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_FIT4_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_PIT1</spirit:name>
      <spirit:displayName>Use PIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_PIT1" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4010" spirit:configGroups="4 PIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT1_SIZE</spirit:name>
      <spirit:displayName>Number of Bits for Timer</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT1_SIZE" spirit:order="4020" spirit:configGroups="4 PIT" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT1_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT1_READABLE</spirit:name>
      <spirit:displayName>Shall Counter Value Be Readable</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT1_READABLE" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4030" spirit:configGroups="4 PIT">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT1_READABLE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT1_PRESCALER</spirit:name>
      <spirit:displayName>Define Prescaler</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT1_PRESCALER" spirit:choiceRef="choice_pairs_f0f6eb36" spirit:order="4040" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT1_PRESCALER" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT1_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT1_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4050" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT1_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_PIT2</spirit:name>
      <spirit:displayName>Use PIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_PIT2" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4060" spirit:configGroups="4 PIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT2_SIZE</spirit:name>
      <spirit:displayName>Number of Bits for Timer</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT2_SIZE" spirit:order="4070" spirit:configGroups="4 PIT" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT2_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT2_READABLE</spirit:name>
      <spirit:displayName>Shall Counter Value Be Readable</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT2_READABLE" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4080" spirit:configGroups="4 PIT">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT2_READABLE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT2_PRESCALER</spirit:name>
      <spirit:displayName>Define Prescaler</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT2_PRESCALER" spirit:choiceRef="choice_pairs_007f01e9" spirit:order="4090" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT2_PRESCALER" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT2_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT2_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4100" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT2_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_PIT3</spirit:name>
      <spirit:displayName>Use PIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_PIT3" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4110" spirit:configGroups="4 PIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT3_SIZE</spirit:name>
      <spirit:displayName>Number of Bits for Timer</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT3_SIZE" spirit:order="4120" spirit:configGroups="4 PIT" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT3_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT3_READABLE</spirit:name>
      <spirit:displayName>Shall Counter Value Be Readable</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT3_READABLE" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4130" spirit:configGroups="4 PIT">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT3_READABLE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT3_PRESCALER</spirit:name>
      <spirit:displayName>Define Prescaler</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT3_PRESCALER" spirit:choiceRef="choice_pairs_4847022f" spirit:order="4140" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT3_PRESCALER" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT3_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT3_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4150" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT3_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_PIT4</spirit:name>
      <spirit:displayName>Use PIT</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_PIT4" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4160" spirit:configGroups="4 PIT">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT4_SIZE</spirit:name>
      <spirit:displayName>Number of Bits for Timer</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT4_SIZE" spirit:order="4170" spirit:configGroups="4 PIT" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT4_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT4_READABLE</spirit:name>
      <spirit:displayName>Shall Counter Value Be Readable</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT4_READABLE" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4180" spirit:configGroups="4 PIT">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT4_READABLE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT4_PRESCALER</spirit:name>
      <spirit:displayName>Define Prescaler</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT4_PRESCALER" spirit:choiceRef="choice_pairs_5f1e379e" spirit:order="4190" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT4_PRESCALER" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PIT4_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PIT4_INTERRUPT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="4200" spirit:configGroups="4 PIT">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_PIT4_INTERRUPT" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPO1</spirit:name>
      <spirit:displayName>Use GPO</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPO1" spirit:choiceRef="choice_pairs_4873554b" spirit:order="5010" spirit:configGroups="5 GPO">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO1_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO1_SIZE" spirit:order="5020" spirit:configGroups="5 GPO" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO1_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO1_INIT</spirit:name>
      <spirit:displayName>Initial Value of GPO</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO1_INIT" spirit:order="5030" spirit:configGroups="5 GPO" spirit:bitStringLength="32">0x00000000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO1_INIT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPO2</spirit:name>
      <spirit:displayName>Use GPO</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPO2" spirit:choiceRef="choice_pairs_4873554b" spirit:order="5040" spirit:configGroups="5 GPO">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO2_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO2_SIZE" spirit:order="5050" spirit:configGroups="5 GPO" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO2_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO2_INIT</spirit:name>
      <spirit:displayName>Initial Value of GPO</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO2_INIT" spirit:order="5060" spirit:configGroups="5 GPO" spirit:bitStringLength="32">0x00000000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO2_INIT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPO3</spirit:name>
      <spirit:displayName>Use GPO</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPO3" spirit:choiceRef="choice_pairs_4873554b" spirit:order="5070" spirit:configGroups="5 GPO">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO3_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO3_SIZE" spirit:order="5080" spirit:configGroups="5 GPO" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO3_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO3_INIT</spirit:name>
      <spirit:displayName>Initial Value of GPO</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO3_INIT" spirit:order="5090" spirit:configGroups="5 GPO" spirit:bitStringLength="32">0x00000000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO3_INIT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPO4</spirit:name>
      <spirit:displayName>Use GPO</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPO4" spirit:choiceRef="choice_pairs_4873554b" spirit:order="5100" spirit:configGroups="5 GPO">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO4_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO4_SIZE" spirit:order="5110" spirit:configGroups="5 GPO" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO4_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPO4_INIT</spirit:name>
      <spirit:displayName>Initial Value of GPO</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPO4_INIT" spirit:order="5120" spirit:configGroups="5 GPO" spirit:bitStringLength="32">0x00000000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPO4_INIT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPI1</spirit:name>
      <spirit:displayName>Use GPI</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPI1" spirit:choiceRef="choice_pairs_4873554b" spirit:order="6010" spirit:configGroups="6 GPI">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI1_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI1_SIZE" spirit:order="6020" spirit:configGroups="6 GPI" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI1_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI1_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI1_INTERRUPT" spirit:choiceRef="choice_pairs_7ba91213" spirit:order="6030" spirit:configGroups="6 GPI">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI1_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPI2</spirit:name>
      <spirit:displayName>Use GPI</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPI2" spirit:choiceRef="choice_pairs_4873554b" spirit:order="6040" spirit:configGroups="6 GPI">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI2_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI2_SIZE" spirit:order="6050" spirit:configGroups="6 GPI" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI2_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI2_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI2_INTERRUPT" spirit:choiceRef="choice_pairs_7ba91213" spirit:order="6060" spirit:configGroups="6 GPI">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI2_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPI3</spirit:name>
      <spirit:displayName>Use GPI</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPI3" spirit:choiceRef="choice_pairs_4873554b" spirit:order="6070" spirit:configGroups="6 GPI">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI3_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI3_SIZE" spirit:order="6080" spirit:configGroups="6 GPI" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI3_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI3_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI3_INTERRUPT" spirit:choiceRef="choice_pairs_7ba91213" spirit:order="6090" spirit:configGroups="6 GPI">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI3_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_USE_GPI4</spirit:name>
      <spirit:displayName>Use GPI</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_USE_GPI4" spirit:choiceRef="choice_pairs_4873554b" spirit:order="6100" spirit:configGroups="6 GPI">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI4_SIZE</spirit:name>
      <spirit:displayName>Number of Bits</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI4_SIZE" spirit:order="6110" spirit:configGroups="6 GPI" spirit:minimum="1" spirit:maximum="32" spirit:rangeType="long">32</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI4_SIZE" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_GPI4_INTERRUPT</spirit:name>
      <spirit:displayName>Generate Interrupt</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_GPI4_INTERRUPT" spirit:choiceRef="choice_pairs_7ba91213" spirit:order="6120" spirit:configGroups="6 GPI">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_GPI4_INTERRUPT" xilinx:dependency="true">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_HAS_FAST</spirit:name>
      <spirit:displayName>Use Low-latency Interrupt Handling</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_HAS_FAST" spirit:choiceRef="choice_pairs_4873554b" spirit:order="7100" spirit:configGroups="7 Interrupt">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_USE_EXT_INTR</spirit:name>
      <spirit:displayName>Use External Interrupts</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_USE_EXT_INTR" spirit:choiceRef="choice_pairs_4873554b" spirit:order="7200" spirit:configGroups="7 Interrupt">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_USE_IRQ_OUT</spirit:name>
      <spirit:displayName>Use Separate Interrupt Output</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_USE_IRQ_OUT" spirit:choiceRef="choice_pairs_4873554b" spirit:order="7250" spirit:configGroups="7 Interrupt">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_IRQ_CONNECTION</spirit:name>
      <spirit:displayName>Interrupt Output Connection</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_IRQ_CONNECTION" spirit:choiceRef="choice_pairs_d4609148" spirit:order="7280">0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_INTC_IRQ_CONNECTION" xilinx:dependency="(spirit:decode(id(&apos;PARAM_VALUE.C_INTC_HAS_FAST&apos;)) = 0)">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_INTR_SIZE</spirit:name>
      <spirit:displayName>Number of External Inputs</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_INTR_SIZE" spirit:order="7300" spirit:configGroups="7 Interrupt" spirit:minimum="1" spirit:maximum="16" spirit:rangeType="long">1</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_INTC_INTR_SIZE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_LEVEL_EDGE</spirit:name>
      <spirit:displayName>Level or Edge of External Interrupts</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_LEVEL_EDGE" spirit:order="7400" spirit:configGroups="7 Interrupt" spirit:bitStringLength="16">0x0000</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_INTC_LEVEL_EDGE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_POSITIVE</spirit:name>
      <spirit:displayName>Positive or Negative External Interrupts</spirit:displayName>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_POSITIVE" spirit:order="7500" spirit:configGroups="7 Interrupt" spirit:bitStringLength="16">0xFFFF</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_INTC_POSITIVE" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_ADDR_WIDTH</spirit:name>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_ADDR_WIDTH" spirit:order="7600" spirit:configGroups="7 Interrupt" spirit:minimum="5" spirit:maximum="32" spirit:rangeType="long">17</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.C_INTC_ADDR_WIDTH" xilinx:dependency="true">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_ASYNC_INTR</spirit:name>
      <spirit:displayName>Interrupts asynchronous</spirit:displayName>
      <spirit:description>The setting of each bit in this option indicates whether the incoming interrupt is treated as asynchronous or not. 0 = Synchronous, 1 = Asynchronous.</spirit:description>
      <spirit:value spirit:format="bitString" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_ASYNC_INTR" spirit:order="7700" spirit:bitStringLength="16">0xFFFF</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_INTC_NUM_SYNC_FF</spirit:name>
      <spirit:displayName>Number of synchronization flip-flops</spirit:displayName>
      <spirit:description>Number of synchronization flip-flops used to synchronize asynchronous interupt inputs</spirit:description>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_INTC_NUM_SYNC_FF" spirit:order="7800" spirit:minimum="0" spirit:maximum="7" spirit:rangeType="long">2</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Component_Name" spirit:order="1">bd_bf3f_iomodule_0_0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>USE_BOARD_FLOW</spirit:name>
      <spirit:displayName>Generate Board based IO Constraints</spirit:displayName>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.USE_BOARD_FLOW" spirit:order="100" spirit:configGroups="0 Board">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GPIO1_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.GPIO1_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="110" spirit:configGroups="0 Board">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GPIO2_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.GPIO2_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="120" spirit:configGroups="0 Board">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GPIO3_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.GPIO3_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="130" spirit:configGroups="0 Board">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GPIO4_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.GPIO4_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="140" spirit:configGroups="0 Board">Custom</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>UART_BOARD_INTERFACE</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.UART_BOARD_INTERFACE" spirit:choiceRef="choice_list_ac75ef1e" spirit:order="150" spirit:configGroups="0 Board">Custom</spirit:value>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:displayName>IOModule</xilinx:displayName>
      <xilinx:coreRevision>0</xilinx:coreRevision>
      <xilinx:configElementInfos>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.CLK.FREQ_HZ" xilinx:valueSource="user_prop"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.SLMB.ADDR_WIDTH" xilinx:valueSource="ip_propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.SLMB.DATA_WIDTH" xilinx:valueSource="ip_propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_BASEADDR" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_FREQ" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_HIGHADDR" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INSTANCE" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INTC_ADDR_WIDTH" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INTC_BASE_VECTORS" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INTC_HAS_FAST" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INTC_LEVEL_EDGE" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INTC_POSITIVE" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_INTC_USE_IRQ_OUT" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_IO_BASEADDR" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_IO_HIGHADDR" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_IO_MASK" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_LMB_AWIDTH" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_LMB_DWIDTH" xilinx:valueSource="propagated"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_MASK" xilinx:valueSource="user"/>
        <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.C_USE_IO_BUS" xilinx:valueSource="user"/>
      </xilinx:configElementInfos>
    </xilinx:coreExtensions>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2017.1_sdx</xilinx:xilinxVersion>
      <xilinx:checksum xilinx:scope="busInterfaces" xilinx:value="0e6d9c90"/>
      <xilinx:checksum xilinx:scope="memoryMaps" xilinx:value="a2002635"/>
      <xilinx:checksum xilinx:scope="fileGroups" xilinx:value="24747f40"/>
      <xilinx:checksum xilinx:scope="ports" xilinx:value="571e5946"/>
      <xilinx:checksum xilinx:scope="hdlParameters" xilinx:value="91ac1da5"/>
      <xilinx:checksum xilinx:scope="parameters" xilinx:value="7798fa69"/>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
