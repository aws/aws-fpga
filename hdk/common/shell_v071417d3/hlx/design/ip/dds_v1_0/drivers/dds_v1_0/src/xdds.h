// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDDS_H
#define XDDS_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdds_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Prog_bus_BaseAddress;
} XDds_Config;
#endif

typedef struct {
    u32 Prog_bus_BaseAddress;
    u32 IsReady;
} XDds;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDds_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDds_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDds_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDds_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDds_Initialize(XDds *InstancePtr, u16 DeviceId);
XDds_Config* XDds_LookupConfig(u16 DeviceId);
int XDds_CfgInitialize(XDds *InstancePtr, XDds_Config *ConfigPtr);
#else
int XDds_Initialize(XDds *InstancePtr, const char* InstanceName);
int XDds_Release(XDds *InstancePtr);
#endif

void XDds_Start(XDds *InstancePtr);
u32 XDds_IsDone(XDds *InstancePtr);
u32 XDds_IsIdle(XDds *InstancePtr);
u32 XDds_IsReady(XDds *InstancePtr);
void XDds_EnableAutoRestart(XDds *InstancePtr);
void XDds_DisableAutoRestart(XDds *InstancePtr);

void XDds_Set_nofSample(XDds *InstancePtr, u32 Data);
u32 XDds_Get_nofSample(XDds *InstancePtr);
void XDds_Set_incr_V(XDds *InstancePtr, u32 Data);
u32 XDds_Get_incr_V(XDds *InstancePtr);

void XDds_InterruptGlobalEnable(XDds *InstancePtr);
void XDds_InterruptGlobalDisable(XDds *InstancePtr);
void XDds_InterruptEnable(XDds *InstancePtr, u32 Mask);
void XDds_InterruptDisable(XDds *InstancePtr, u32 Mask);
void XDds_InterruptClear(XDds *InstancePtr, u32 Mask);
u32 XDds_InterruptGetEnabled(XDds *InstancePtr);
u32 XDds_InterruptGetStatus(XDds *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
